     1                                  ; マクロ
     2                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     4                              <1> SECT_SIZE equ (512)                     ; セクタサイズ
     5                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートプログラムのセクタ数
     3                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate - 1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no resw 1      ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln resw 1    ; シリンダ
    20 00000004 <res 00000002>      <1>     .head resw 1    ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect resw 1    ; セクタ
    22                              <1> endstruc
     4                                  
     5                                      ORG BOOT_LOAD ; ロードアドレスをアセンブラに指示
     6                                  
     7                                  ; エントリポイント
     8                                  entry:
     9                                      ; BPB(BIOS Parameter Block)
    10 00000000 EB58                        jmp ipl ; IPLへジャンプ
    11 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    12                                  
    13                                      ;IPL
    14                                  ipl:
    15 0000005A FA                          cli ; 割り込み禁止
    16                                  
    17 0000005B B80000                      mov ax, 0x0000
    18 0000005E 8ED8                        mov ds, ax
    19 00000060 8EC0                        mov es, ax
    20 00000062 8ED0                        mov ss, ax
    21 00000064 BC007C                      mov sp, BOOT_LOAD
    22                                  
    23 00000067 FB                          sti ; 割り込み許可
    24                                  
    25                                      ; ブートドライブ番号を保存
    26 00000068 8816[B800]                  mov [BOOT + drive.no], dl ; ブートドライブを保存
    27                                  
    28                                      ; 文字列を表示
    29 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0 ; puts(.s0);
    29 00000074 02                 
    30                                  
    31                                      ; 残りのセクタを全て読み込む
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; BX = 残りのブートセクタ数;
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; CX = 次のロードアドレス;
    34                                  
    35 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx    ; AX = read_chs(BOOT, BX, CX);
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx                      ; if (AX != 残りのセクタ数)
    38 00000088 740C                    .10Q: jz .10E                       ; {
    39 0000008A 68[A600]E8300083C4-     .10T: cdecl puts, .e0               ;   puts(.e0);
    39 00000092 02                 
    40 00000093 E84900                      call reboot                     ;   reboot(); 
    41                                  .10E:                               ; }
    42                                  
    43                                      ; 次のステージへ移行
    44 00000096 E96701                      jmp stage_2             ; ブート処理の第2ステージ
    45                                  
    46                                      ; データ
    47 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    47 000000A2 2E0A0D00           
    48 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    48 000000AF 746F72207265616400 
    49                                  
    50                                  ; ブートドライブに関する情報
    51                                  ALIGN 2, db 0
    52                                  BOOT:                       ; ブートドライブに関する情報
    53                                      istruc drive            
    54 000000B8 0000                            at drive.no, dw 0   ; ドライブ
    55 000000BA 0000                            at drive.cyln, dw 0 ; C:シリンダ
    56 000000BC 0000                            at drive.head, dw 0 ; H:ヘッド
    57 000000BE 0200                            at drive.sect, dw 2 ; S:セクタ
    58                                      iend
    59                                  
    60                                  ; モジュール
    61                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>     ; スタックフレームの構築
     3 000000C0 55                  <1>     push bp
     4 000000C1 89E5                <1>     mov bp, sp
     5                              <1>     
     6                              <1>     ; レジスタの保存
     7 000000C3 50                  <1>     push ax
     8 000000C4 53                  <1>     push bx
     9 000000C5 56                  <1>     push si
    10                              <1> 
    11                              <1>     ; 引数を取得
    12 000000C6 8B7604              <1>     mov si, [bp + 4] ; SI = 文字列へのアドレス
    13                              <1> 
    14                              <1>     ; 処理の開始
    15 000000C9 B40E                <1>     mov ah, 0x0E    ; テレタイプ式1文字出力
    16 000000CB BB0000              <1>     mov bx, 0x0000  ; ページ番号と文字色を0に設定
    17 000000CE FC                  <1>     cld             ; DF = 0; // アドレス加算
    18                              <1> .10L:               ; do
    19                              <1>                     ; {
    20 000000CF AC                  <1>     lodsb           ;   AL = *SI++;
    21                              <1>                     ;
    22 000000D0 3C00                <1>     cmp al, 0       ; if (0 == AL)
    23 000000D2 7404                <1>     je .10E         ;   break;
    24                              <1>                     ;
    25 000000D4 CD10                <1>     int 0x10        ; int 10(0x0E, AL); // 文字出力
    26 000000D6 EBF7                <1>     jmp .10L        ;
    27                              <1> .10E:               ; } while (1);
    28                              <1> 
    29                              <1>     ; レジスタの復帰
    30 000000D8 5E                  <1>     pop si
    31 000000D9 5B                  <1>     pop bx
    32 000000DA 58                  <1>     pop ax
    33                              <1> 
    34                              <1>     ; スタックフレームの破棄
    35 000000DB 89EC                <1>     mov sp, bp
    36 000000DD 5D                  <1>     pop bp
    37                              <1> 
    38 000000DE C3                  <1>     ret
    62                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ; メッセージを表示
     3 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl puts, .s0 ; // 再起動メッセージを表示
     3 000000E7 02                  <1>
     4                              <1> 
     5                              <1>         ; キー入力待ち
     6                              <1> .10L:                   ; do
     7                              <1>                         ; {
     8 000000E8 B410                <1>         mov ah, 0x10    ;   // キー入力待ち
     9 000000EA CD16                <1>         int 0x16        ;   AL = BIOS(0x16, 0x10);
    10                              <1>                         ;
    11 000000EC 3C20                <1>         cmp al, ' '     ;   ZF = AL === ' ';
    12 000000EE 75F8                <1>         jne .10L        ; }
    13                              <1> 
    14                              <1>         ; 改行を出力
    15 000000F0 68[1901]E8CAFF83C4- <1>         cdecl puts, .s1 ; 改行
    15 000000F8 02                  <1>
    16                              <1> 
    17                              <1>         ; 再起動
    18 000000F9 CD19                <1>         int 0x19        ; BIOS(0x19); reboot();
    19                              <1> 
    20                              <1>         ; 文字列データ
    21 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 00000104 414345206B65792074- <1>
    21 0000010D 6F207265626F6F742E- <1>
    21 00000116 2E2E00              <1>
    22 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    63                                  %include "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;     +8| コピー先
     4                              <1>                 ;     +6| セクタ数
     5                              <1>                 ;     +4| パラメータバッファ
     6                              <1>                 ; ------+----------------
     7                              <1>                 ;     +2| IP（戻り番地)
     8 0000011E 55                  <1>     push bp     ; BP + 0| BP（元の値）
     9 0000011F 89E5                <1>     mov bp, sp  ; ------+----------------
    10 00000121 6A03                <1>     push 3      ;     -2| retry = 3; // リトライ回数
    11 00000123 6A00                <1>     push 0      ;     -4| sect = 0; // 読み込みセクタ数
    12                              <1> 
    13                              <1>     ; レジスタの保存
    14 00000125 53                  <1>     push bx
    15 00000126 51                  <1>     push cx
    16 00000127 52                  <1>     push dx
    17 00000128 06                  <1>     push es
    18 00000129 56                  <1>     push si
    19                              <1> 
    20                              <1>     ; 処理の開始
    21 0000012A 8B7604              <1>     mov si, [bp + 4]    ; SI = SRCバッファ;
    22                              <1> 
    23                              <1>     ; CXレジスタの保存
    24                              <1>     ; (BIOSコールの呼び出しに適した形に変換)
    25 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]   ; CH = シリンダ番号（下位バイト）
    26 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]   ; CL = シリンダ番号（上位バイト）
    27 00000133 C0E106              <1>     shl cl, 6                       ; CL <<= 6; // 最上位2ビットにシフト
    28 00000136 0A4C06              <1>     or cl, [si + drive.sect]        ; CL |= セクタ番号;
    29                              <1> 
    30                              <1>     ; セクタ読み込み
    31 00000139 8A7404              <1>     mov dh, [si + drive.head]       ; DH = ヘッド番号;
    32 0000013C 8A14                <1>     mov dl, [si + 0]                ; DL = ドライブ番号;
    33 0000013E B80000              <1>     mov ax, 0x0000                  ; AX = 0x0000;
    34 00000141 8EC0                <1>     mov es, ax                      ; ES = セグメント
    35 00000143 8B5E08              <1>     mov bx, [bp + 8]                ; BX = コピー先;
    36                              <1> .10L:                               ; do
    37                              <1>                                     ; {
    38 00000146 B402                <1>     mov ah, 0x02                    ;   AH = セクタ読み込み
    39 00000148 8A4606              <1>     mov al, [bp + 6]                ;   AL = セクタ数
    40                              <1> 
    41 0000014B CD13                <1>     int 0x13                        ;   CF = BIOS(0x13, 0x02);
    42 0000014D 7304                <1>     jnc .11E                        ;   if (CF)
    43                              <1>                                     ;   {
    44 0000014F B000                <1>     mov al, 0                       ;       AL = 0;
    45 00000151 EB0C                <1>     jmp .10E                        ;       break;
    46                              <1> .11E:                               ;   }
    47                              <1> 
    48 00000153 3C00                <1>     cmp al, 0                       ;   if (読み込んだセクタがあれば)
    49 00000155 7508                <1>     jne .10E                        ;       break;
    50                              <1> 
    51 00000157 B80000              <1>     mov ax, 0                       ;   ret = 0; // 戻り値設定
    52 0000015A FF4EFE              <1>     dec word [bp - 2]               ; }
    53 0000015D 75E7                <1>     jnz .10L                        ; while (-retry);
    54                              <1> .10E:
    55 0000015F B400                <1>     mov ah, 0                       ; AH = 0; // ステータス情報は破棄
    56                              <1> 
    57                              <1>     ; レジスタの復帰　
    58 00000161 5E                  <1>     pop si
    59 00000162 07                  <1>     pop es
    60 00000163 5A                  <1>     pop dx
    61 00000164 59                  <1>     pop cx
    62 00000165 5B                  <1>     pop bx
    63                              <1> 
    64                              <1>     ; スタックフレームの破棄
    65 00000166 89EC                <1>     mov sp, bp
    66 00000168 5D                  <1>     pop bp
    67                              <1> 
    68 00000169 C3                  <1>     ret
    64                                  
    65                                  ; ブートフラグ（先頭512バイトの終了）
    66 0000016A 00<rept>                    times 510 - ($ - $$) db 0x00
    67 000001FE 55AA                        db 0x55, 0xAA
    68                                  
    69                                  ; ブート処理の第2ステージ
    70                                  stage_2:
    71                                      ; 文字列を表示
    72 00000200 68[0B02]E8BAFE83C4-         cdecl puts, .s0
    72 00000208 02                 
    73                                  
    74                                      ; 処理を終了
    75 00000209 EBFE                        jmp $
    76                                  
    77                                      ; データ
    78 0000020B 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
    78 00000214 2E2E2E0A0D00       
    79                                  
    80                                  ; バディング（このファイルは8Kバイトとする)
    81 0000021A 00<rept>                    times BOOT_SIZE - ($ - $$) db 0 ; バディング
