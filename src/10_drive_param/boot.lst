     1                                  ; マクロ
     2                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     4                              <1> SECT_SIZE equ (512)                     ; セクタサイズ
     5                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートプログラムのセクタ数
     3                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate - 1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no resw 1      ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln resw 1    ; シリンダ
    20 00000004 <res 00000002>      <1>     .head resw 1    ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect resw 1    ; セクタ
    22                              <1> endstruc
     4                                  
     5                                      ORG BOOT_LOAD ; ロードアドレスをアセンブラに指示
     6                                  
     7                                  ; エントリポイント
     8                                  entry:
     9                                      ; BPB(BIOS Parameter Block)
    10 00000000 EB58                        jmp ipl ; IPLへジャンプ
    11 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    12                                  
    13                                      ;IPL
    14                                  ipl:
    15 0000005A FA                          cli ; 割り込み禁止
    16                                  
    17 0000005B B80000                      mov ax, 0x0000
    18 0000005E 8ED8                        mov ds, ax
    19 00000060 8EC0                        mov es, ax
    20 00000062 8ED0                        mov ss, ax
    21 00000064 BC007C                      mov sp, BOOT_LOAD
    22                                  
    23 00000067 FB                          sti ; 割り込み許可
    24                                  
    25                                      ; ブートドライブ番号を保存
    26 00000068 8816[B800]                  mov [BOOT + drive.no], dl ; ブートドライブを保存
    27                                  
    28                                      ; 文字列を表示
    29 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0 ; puts(.s0);
    29 00000074 02                 
    30                                  
    31                                      ; 残りのセクタを全て読み込む
    32 00000075 BB0F00                      mov bx, BOOT_SECT - 1           ; BX = 残りのブートセクタ数;
    33 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE   ; CX = 次のロードアドレス;
    34                                  
    35 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx    ; AX = read_chs(BOOT, BX, CX);
    35 00000083 83C406             
    36                                  
    37 00000086 39D8                        cmp ax, bx                      ; if (AX != 残りのセクタ数)
    38 00000088 740C                    .10Q: jz .10E                       ; {
    39 0000008A 68[A600]E8300083C4-     .10T: cdecl puts, .e0               ;   puts(.e0);
    39 00000092 02                 
    40 00000093 E84900                      call reboot                     ;   reboot(); 
    41                                  .10E:                               ; }
    42                                  
    43                                      ; 次のステージへ移行
    44 00000096 E92802                      jmp stage_2             ; ブート処理の第2ステージ
    45                                  
    46                                      ; データ
    47 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    47 000000A2 2E0A0D00           
    48 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    48 000000AF 746F72207265616400 
    49                                  
    50                                  ; ブートドライブに関する情報
    51                                  ALIGN 2, db 0
    52                                  BOOT:                       ; ブートドライブに関する情報
    53                                      istruc drive            
    54 000000B8 0000                            at drive.no, dw 0   ; ドライブ
    55 000000BA 0000                            at drive.cyln, dw 0 ; C:シリンダ
    56 000000BC 0000                            at drive.head, dw 0 ; H:ヘッド
    57 000000BE 0200                            at drive.sect, dw 2 ; S:セクタ
    58                                      iend
    59                                  
    60                                  ; モジュール
    61                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>     ; スタックフレームの構築
     3 000000C0 55                  <1>     push bp
     4 000000C1 89E5                <1>     mov bp, sp
     5                              <1>     
     6                              <1>     ; レジスタの保存
     7 000000C3 50                  <1>     push ax
     8 000000C4 53                  <1>     push bx
     9 000000C5 56                  <1>     push si
    10                              <1> 
    11                              <1>     ; 引数を取得
    12 000000C6 8B7604              <1>     mov si, [bp + 4] ; SI = 文字列へのアドレス
    13                              <1> 
    14                              <1>     ; 処理の開始
    15 000000C9 B40E                <1>     mov ah, 0x0E    ; テレタイプ式1文字出力
    16 000000CB BB0000              <1>     mov bx, 0x0000  ; ページ番号と文字色を0に設定
    17 000000CE FC                  <1>     cld             ; DF = 0; // アドレス加算
    18                              <1> .10L:               ; do
    19                              <1>                     ; {
    20 000000CF AC                  <1>     lodsb           ;   AL = *SI++;
    21                              <1>                     ;
    22 000000D0 3C00                <1>     cmp al, 0       ; if (0 == AL)
    23 000000D2 7404                <1>     je .10E         ;   break;
    24                              <1>                     ;
    25 000000D4 CD10                <1>     int 0x10        ; int 10(0x0E, AL); // 文字出力
    26 000000D6 EBF7                <1>     jmp .10L        ;
    27                              <1> .10E:               ; } while (1);
    28                              <1> 
    29                              <1>     ; レジスタの復帰
    30 000000D8 5E                  <1>     pop si
    31 000000D9 5B                  <1>     pop bx
    32 000000DA 58                  <1>     pop ax
    33                              <1> 
    34                              <1>     ; スタックフレームの破棄
    35 000000DB 89EC                <1>     mov sp, bp
    36 000000DD 5D                  <1>     pop bp
    37                              <1> 
    38 000000DE C3                  <1>     ret
    62                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ; メッセージを表示
     3 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl puts, .s0 ; // 再起動メッセージを表示
     3 000000E7 02                  <1>
     4                              <1> 
     5                              <1>         ; キー入力待ち
     6                              <1> .10L:                   ; do
     7                              <1>                         ; {
     8 000000E8 B410                <1>         mov ah, 0x10    ;   // キー入力待ち
     9 000000EA CD16                <1>         int 0x16        ;   AL = BIOS(0x16, 0x10);
    10                              <1>                         ;
    11 000000EC 3C20                <1>         cmp al, ' '     ;   ZF = AL === ' ';
    12 000000EE 75F8                <1>         jne .10L        ; }
    13                              <1> 
    14                              <1>         ; 改行を出力
    15 000000F0 68[1901]E8CAFF83C4- <1>         cdecl puts, .s1 ; 改行
    15 000000F8 02                  <1>
    16                              <1> 
    17                              <1>         ; 再起動
    18 000000F9 CD19                <1>         int 0x19        ; BIOS(0x19); reboot();
    19                              <1> 
    20                              <1>         ; 文字列データ
    21 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 00000104 414345206B65792074- <1>
    21 0000010D 6F207265626F6F742E- <1>
    21 00000116 2E2E00              <1>
    22 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    63                                  %include "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;     +8| コピー先
     4                              <1>                 ;     +6| セクタ数
     5                              <1>                 ;     +4| パラメータバッファ
     6                              <1>                 ; ------+----------------
     7                              <1>                 ;     +2| IP（戻り番地)
     8 0000011E 55                  <1>     push bp     ; BP + 0| BP（元の値）
     9 0000011F 89E5                <1>     mov bp, sp  ; ------+----------------
    10 00000121 6A03                <1>     push 3      ;     -2| retry = 3; // リトライ回数
    11 00000123 6A00                <1>     push 0      ;     -4| sect = 0; // 読み込みセクタ数
    12                              <1> 
    13                              <1>     ; レジスタの保存
    14 00000125 53                  <1>     push bx
    15 00000126 51                  <1>     push cx
    16 00000127 52                  <1>     push dx
    17 00000128 06                  <1>     push es
    18 00000129 56                  <1>     push si
    19                              <1> 
    20                              <1>     ; 処理の開始
    21 0000012A 8B7604              <1>     mov si, [bp + 4]    ; SI = SRCバッファ;
    22                              <1> 
    23                              <1>     ; CXレジスタの保存
    24                              <1>     ; (BIOSコールの呼び出しに適した形に変換)
    25 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]   ; CH = シリンダ番号（下位バイト）
    26 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]   ; CL = シリンダ番号（上位バイト）
    27 00000133 C0E106              <1>     shl cl, 6                       ; CL <<= 6; // 最上位2ビットにシフト
    28 00000136 0A4C06              <1>     or cl, [si + drive.sect]        ; CL |= セクタ番号;
    29                              <1> 
    30                              <1>     ; セクタ読み込み
    31 00000139 8A7404              <1>     mov dh, [si + drive.head]       ; DH = ヘッド番号;
    32 0000013C 8A14                <1>     mov dl, [si + 0]                ; DL = ドライブ番号;
    33 0000013E B80000              <1>     mov ax, 0x0000                  ; AX = 0x0000;
    34 00000141 8EC0                <1>     mov es, ax                      ; ES = セグメント
    35 00000143 8B5E08              <1>     mov bx, [bp + 8]                ; BX = コピー先;
    36                              <1> .10L:                               ; do
    37                              <1>                                     ; {
    38 00000146 B402                <1>     mov ah, 0x02                    ;   AH = セクタ読み込み
    39 00000148 8A4606              <1>     mov al, [bp + 6]                ;   AL = セクタ数
    40                              <1> 
    41 0000014B CD13                <1>     int 0x13                        ;   CF = BIOS(0x13, 0x02);
    42 0000014D 7304                <1>     jnc .11E                        ;   if (CF)
    43                              <1>                                     ;   {
    44 0000014F B000                <1>     mov al, 0                       ;       AL = 0;
    45 00000151 EB0C                <1>     jmp .10E                        ;       break;
    46                              <1> .11E:                               ;   }
    47                              <1> 
    48 00000153 3C00                <1>     cmp al, 0                       ;   if (読み込んだセクタがあれば)
    49 00000155 7508                <1>     jne .10E                        ;       break;
    50                              <1> 
    51 00000157 B80000              <1>     mov ax, 0                       ;   ret = 0; // 戻り値設定
    52 0000015A FF4EFE              <1>     dec word [bp - 2]               ; }
    53 0000015D 75E7                <1>     jnz .10L                        ; while (-retry);
    54                              <1> .10E:
    55 0000015F B400                <1>     mov ah, 0                       ; AH = 0; // ステータス情報は破棄
    56                              <1> 
    57                              <1>     ; レジスタの復帰　
    58 00000161 5E                  <1>     pop si
    59 00000162 07                  <1>     pop es
    60 00000163 5A                  <1>     pop dx
    61 00000164 59                  <1>     pop cx
    62 00000165 5B                  <1>     pop bx
    63                              <1> 
    64                              <1>     ; スタックフレームの破棄
    65 00000166 89EC                <1>     mov sp, bp
    66 00000168 5D                  <1>     pop bp
    67                              <1> 
    68 00000169 C3                  <1>     ret
    64                                  
    65                                  ; ブートフラグ（先頭512バイトの終了）
    66 0000016A 00<rept>                    times 510 - ($ - $$) db 0x00
    67 000001FE 55AA                        db 0x55, 0xAA
    68                                  
    69                                  ; モジュール（先頭512バイト以降に配置)
    70                                  %include "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ; スタックフレームの構築
     3 00000200 55                  <1>         push bp
     4 00000201 89E5                <1>         mov bp, sp
     5                              <1> 
     6                              <1>         ; レジスタの保存
     7 00000203 50                  <1>         push ax
     8 00000204 53                  <1>         push bx
     9 00000205 51                  <1>         push cx
    10 00000206 52                  <1>         push dx
    11 00000207 56                  <1>         push si
    12 00000208 57                  <1>         push di
    13                              <1> 
    14                              <1>         ; 引数を取得
    15 00000209 8B4604              <1>         mov ax, [bp + 4]                        ; val = 数値
    16 0000020C 8B7606              <1>         mov si, [bp + 6]                        ; dst = バッファアドレス
    17 0000020F 8B4E08              <1>         mov cx, [bp + 8]                        ; size = 残りバッファサイズ
    18                              <1> 
    19 00000212 89F7                <1>         mov di, si
    20 00000214 01CF                <1>         add di, cx                              ; dst = &dst[size - 1]
    21 00000216 4F                  <1>         dec di
    22                              <1> 
    23 00000217 8B5E0C              <1>         mov bx, word[bp + 12]                   ; flags = オプション
    24                              <1> 
    25                              <1>         ; 符号付き判定
    26 0000021A F7C30100            <1>         test bx, 0b0001
    27                              <1> .10Q:
    28 0000021E 7408                <1>         je .10E
    29 00000220 83F800              <1>         cmp ax, 0
    30                              <1> .12Q:
    31 00000223 7D03                <1>         jge .12E
    32 00000225 83CB02              <1>         or bx, 0b0010
    33                              <1> .12E:
    34                              <1> .10E:
    35                              <1> 
    36                              <1>         ; 符号出力判定
    37 00000228 F7C30200            <1>         test bx, 0b0010
    38                              <1> .20Q:
    39 0000022C 7410                <1>         je .20E
    40 0000022E 83F800              <1>         cmp ax, 0
    41                              <1> .22Q:
    42 00000231 7D07                <1>         jge .22F
    43 00000233 F7D8                <1>         neg ax
    44 00000235 C6042D              <1>         mov [si], byte '-'
    45 00000238 EB03                <1>         jmp .22E
    46                              <1> .22F:
    47 0000023A C6042B              <1>         mov [si], byte '+'
    48                              <1> .22E:
    49 0000023D 49                  <1>         dec cx
    50                              <1> .20E:
    51                              <1> 
    52                              <1>         ; ASCII変換
    53 0000023E 8B5E0A              <1>         mov bx, [bp + 10]
    54                              <1> .30L:
    55 00000241 BA0000              <1>         mov dx, 0
    56 00000244 F7F3                <1>         div bx
    57                              <1> 
    58 00000246 89D6                <1>         mov si, dx
    59 00000248 8A94[7002]          <1>         mov dl, byte[.ascii + si]
    60                              <1> 
    61 0000024C 8815                <1>         mov [di], dl
    62 0000024E 4F                  <1>         dec di
    63                              <1> 
    64 0000024F 83F800              <1>         cmp ax, 0
    65 00000252 E0ED                <1>         loopnz .30L
    66                              <1> .30E:
    67                              <1> 
    68                              <1>         ; 空欄を埋める
    69 00000254 83F900              <1>         cmp cx, 0
    70                              <1> .40Q:
    71 00000257 740D                <1>         je .40E
    72 00000259 B020                <1>         mov al, ' '
    73 0000025B 837E0C04            <1>         cmp [bp + 12], word 0b0100
    74                              <1> .42Q:
    75 0000025F 7502                <1>         jne .42E
    76 00000261 B030                <1>         mov al, '0'
    77                              <1> .42E:
    78 00000263 FD                  <1>         std
    79 00000264 F3AA                <1>         rep stosb
    80                              <1> .40E:
    81                              <1> 
    82                              <1>         ; レジスタの復帰
    83 00000266 5F                  <1>         pop di
    84 00000267 5E                  <1>         pop si
    85 00000268 5A                  <1>         pop dx
    86 00000269 59                  <1>         pop cx
    87 0000026A 5B                  <1>         pop bx
    88 0000026B 58                  <1>         pop ax
    89                              <1> 
    90                              <1>         ; 【スタックフレームの破棄】
    91 0000026C 89EC                <1>         mov sp, bp
    92 0000026E 5D                  <1>         pop bp
    93                              <1> 
    94 0000026F C3                  <1>         ret
    95                              <1> 
    96 00000270 303132333435363738- <1> .ascii db "0123456789ABCDEF"
    96 00000279 39414243444546      <1>
    71                                  %include "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;    + 4 | パラメータバッファ
     4                              <1>                 ;    + 2 | IP(戻り番地)
     5 00000280 55                  <1>     push bp     ; BP + 0 | BP(元の値)
     6 00000281 89E5                <1>     mov bp, sp  ; -------+----------------
     7                              <1> 
     8                              <1>     ; レジスタの保存
     9 00000283 53                  <1>     push bx
    10 00000284 51                  <1>     push cx
    11 00000285 06                  <1>     push es
    12 00000286 56                  <1>     push si
    13 00000287 57                  <1>     push di
    14                              <1> 
    15                              <1>     ; 処理の開始
    16 00000288 8B7604              <1>     mov si, [bp + 4]            ; SI = バッファ
    17                              <1> 
    18 0000028B B80000              <1>     mov ax, 0                   ; Disk Base Table Pointerの初期化
    19 0000028E 8EC0                <1>     mov es, ax                  ; ES = 0;
    20 00000290 89C7                <1>     mov di, ax                  ; DI = 0;
    21                              <1> 
    22 00000292 B408                <1>     mov ah, 8                   ; // get drive parameters
    23 00000294 8B3C                <1>     mov di, [si + drive.no]     ; DL = ドライブ番号
    24 00000296 CD13                <1>     int 0x13                    ; CF = BIOS(0x13, 8);
    25 00000298 721B                <1> .10Q: jc .10F                   ; if (0 == CF)
    26                              <1> .10T:                           ; {
    27 0000029A 88C8                <1>     mov al, cl                  ;   AX = セクタ数
    28 0000029C 83E03F              <1>     and ax, 0x3F                ;   // 下位6ビットのみ有効
    29                              <1> 
    30 0000029F C0E906              <1>     shr cl, 6                   ;   CX = シリンダ数
    31 000002A2 C1C908              <1>     ror cx, 8                   ;
    32 000002A5 41                  <1>     inc cx                      ;
    33                              <1> 
    34 000002A6 0FB6DE              <1>     movzx bx, dh                ;   BX = ヘッド数(1ベース)
    35 000002A9 43                  <1>     inc bx                      ;
    36                              <1> 
    37 000002AA 894C02              <1>     mov [si + drive.cyln], cx   ;   drive.syln = CX; // C:シリンダ数
    38 000002AD 895C04              <1>     mov [si + drive.head], bx   ;   drive.head = BX; // H:ヘッド数
    39 000002B0 894406              <1>     mov [si + drive.sect], ax   ;   drive.sect = AX; // S:セクト数
    40                              <1> 
    41 000002B3 EB03                <1>     jmp .10E                    ; }
    42                              <1> .10F:                           ; else
    43                              <1>                                 ; {
    44 000002B5 B80000              <1>     mov ax, 0                   ;   AX = 0; // 失敗
    45                              <1> .10E:                           ; }
    46                              <1> 
    47                              <1>     ; レジスタの復帰
    48 000002B8 5F                  <1>     pop di
    49 000002B9 5E                  <1>     pop si
    50 000002BA 07                  <1>     pop es
    51 000002BB 59                  <1>     pop cx
    52 000002BC 5B                  <1>     pop bx
    53                              <1> 
    54                              <1>     ; スタックフレームの破棄
    55 000002BD 89EC                <1>     mov sp, bp
    56 000002BF 5D                  <1>     pop bp
    57                              <1> 
    58 000002C0 C3                  <1>     ret
    72                                  
    73                                  ; ブート処理の第2ステージ
    74                                  stage_2:
    75                                      ; 文字列を表示
    76 000002C1 68[3B03]E8F9FD83C4-         cdecl puts, .s0
    76 000002C9 02                 
    77                                  
    78                                      ; ドライブ情報を取得
    79 000002CA 68[B800]E8B0FF83C4-         cdecl get_drive_param, BOOT         ; get_drive_param(DX, BOOT.CYLN);
    79 000002D2 02                 
    80 000002D3 83F800                      cmp ax, 0                           ; if (0 == AX)
    81 000002D6 750C                    .10Q: jne .10E                          ; {
    82 000002D8 68[6D03]E8E2FD83C4-     .10T: cdecl puts, .e0                   ;   puts(.e0);
    82 000002E0 02                 
    83 000002E1 E8FBFD                      call reboot                         ;   reboot; //再起動
    84                                  .10E:                                   ; }
    85                                  
    86                                      ; ドライブ情報を表示
    87 000002E4 A1[B800]                    mov ax, [BOOT + drive.no]           ; AX = ブートドライブ;
    88 000002E7 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100  ;
    88 000002EE [5203]50E80CFF83C4-
    88 000002F6 0A                 
    89 000002F7 A1[BA00]                    mov ax, [BOOT + drive.cyln]         ;
    90 000002FA 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100  ;
    90 00000301 [5903]50E8F9FE83C4-
    90 00000309 0A                 
    91 0000030A A1[BC00]                    mov ax, [BOOT + drive.head]         ; AX = ヘッド数;
    92 0000030D 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100  ;
    92 00000314 [6203]50E8E6FE83C4-
    92 0000031C 0A                 
    93 0000031D A1[BE00]                    mov ax, [BOOT + drive.sect]         ; AX = トラックあたりのセクタ数;
    94 00000320 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100  ;
    94 00000327 [6903]50E8D3FE83C4-
    94 0000032F 0A                 
    95 00000330 68[4A03]E88AFD83C4-         cdecl puts, .s1
    95 00000338 02                 
    96                                  
    97                                      ; 処理を終了
    98 00000339 EBFE                        jmp $
    99                                  
   100                                      ; データ
   101 0000033B 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   101 00000344 2E2E2E0A0D00       
   102                                  
   103 0000034A 44726976653A3078        .s1 db "Drive:0x"
   104 00000352 202C20433A3078          .p1 db " , C:0x"
   105 00000359 2020202C20483A3078      .p2 db "   , H:0x"
   106 00000362 202C20533A3078          .p3 db " , S:0x"
   107 00000369 200A0D00                .p4 db " ", 0x0A, 0x0D, 0
   108                                  
   109 0000036D 43616E6E6F74206765-     .e0 db "Cannot get drive parameter.", 0
   109 00000376 742064726976652070-
   109 0000037F 6172616D657465722E-
   109 00000388 00                 
   110                                  
   111                                  ; バディング（このファイルは8Kバイトとする)
   112 00000389 00<rept>                    times (1024 * 8) - ($ - $$) db 0 ; バディング
