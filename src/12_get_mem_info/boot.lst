     1                                  ;********************************************
     2                                  ; マクロ
     3                                  ;********************************************
     4                                  %include "../include/define.s"
     1                              <1> BOOT_LOAD equ 0x7C00                    ; ブートプログラムのロード位置
     2                              <1> 
     3                              <1> BOOT_SIZE equ (1024 * 8)                ; ブートコードサイズ
     4                              <1> SECT_SIZE equ (512)                     ; セクタサイズ
     5                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)   ; ブートプログラムのセクタ数
     6                              <1> 
     7                              <1> E820_RECORD_SIZE equ 20
     5                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate - 1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no resw 1      ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln resw 1    ; シリンダ
    20 00000004 <res 00000002>      <1>     .head resw 1    ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect resw 1    ; セクタ
    22                              <1> endstruc
     6                                  
     7                                      ORG BOOT_LOAD                       ; ロードアドレスをアセンブラに指示
     8                                  
     9                                  ;********************************************
    10                                  ; エントリポイント
    11                                  ;********************************************
    12                                  entry:
    13                                      ;---------------------------
    14                                      ; BPB(BIOS Parameter Block)
    15                                      ;---------------------------
    16 00000000 EB58                        jmp ipl ; IPLへジャンプ
    17 00000002 90<rept>                    times 90 - ($ - $$) db 0x90
    18                                  
    19                                      ;---------------------------
    20                                      ;IPL
    21                                      ;---------------------------
    22                                  ipl:
    23 0000005A FA                          cli ; 割り込み禁止
    24                                  
    25 0000005B B80000                      mov ax, 0x0000
    26 0000005E 8ED8                        mov ds, ax
    27 00000060 8EC0                        mov es, ax
    28 00000062 8ED0                        mov ss, ax
    29 00000064 BC007C                      mov sp, BOOT_LOAD
    30                                  
    31 00000067 FB                          sti ; 割り込み許可
    32                                  
    33                                      ;---------------------------
    34                                      ; ブートドライブ番号を保存
    35                                      ;---------------------------
    36 00000068 8816[B800]                  mov [BOOT + drive.no], dl           ; ブートドライブを保存
    37                                  
    38                                      ;---------------------------
    39                                      ; 文字列を表示
    40                                      ;---------------------------
    41 0000006C 68[9900]E84E0083C4-         cdecl puts, .s0 ; puts(.s0);
    41 00000074 02                 
    42                                  
    43                                      ;---------------------------
    44                                      ; 残りのセクタを全て読み込む
    45                                      ;---------------------------
    46 00000075 BB0F00                      mov bx, BOOT_SECT - 1               ; BX = 残りのブートセクタ数;
    47 00000078 B9007E                      mov cx, BOOT_LOAD + SECT_SIZE       ; CX = 次のロードアドレス;
    48                                  
    49 0000007B 515368[B800]E89B00-         cdecl read_chs, BOOT, bx, cx        ; AX = read_chs(BOOT, BX, CX);
    49 00000083 83C406             
    50                                  
    51 00000086 39D8                        cmp ax, bx                          ; if (AX != 残りのセクタ数)
    52 00000088 740C                    .10Q: jz .10E                           ; {
    53 0000008A 68[A600]E8300083C4-     .10T: cdecl puts, .e0                   ;   puts(.e0);
    53 00000092 02                 
    54 00000093 E84900                      call reboot                         ;   reboot(); 
    55                                  .10E:                                   ; }
    56                                  
    57                                      ;---------------------------
    58                                      ; 次のステージへ移行
    59                                      ;---------------------------
    60 00000096 E96C04                      jmp stage_2                         ; ブート処理の第2ステージ
    61                                  
    62                                      ;---------------------------
    63                                      ; データ
    64                                      ;---------------------------
    65 00000099 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    65 000000A2 2E0A0D00           
    66 000000A6 4572726F723A736563-     .e0 db "Error:sector read", 0
    66 000000AF 746F72207265616400 
    67                                  
    68                                  ;********************************************
    69                                  ; ブートドライブに関する情報
    70                                  ;********************************************
    71                                  ALIGN 2, db 0
    72                                  BOOT:                                   ; ブートドライブに関する情報
    73                                      istruc drive            
    74 000000B8 0000                            at drive.no, dw 0               ; ドライブ
    75 000000BA 0000                            at drive.cyln, dw 0             ; C:シリンダ
    76 000000BC 0000                            at drive.head, dw 0             ; H:ヘッド
    77 000000BE 0200                            at drive.sect, dw 2             ; S:セクタ
    78                                      iend
    79                                  
    80                                  ;********************************************
    81                                  ; モジュール
    82                                  ;********************************************
    83                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>     ; スタックフレームの構築
     3 000000C0 55                  <1>     push bp
     4 000000C1 89E5                <1>     mov bp, sp
     5                              <1>     
     6                              <1>     ; レジスタの保存
     7 000000C3 50                  <1>     push ax
     8 000000C4 53                  <1>     push bx
     9 000000C5 56                  <1>     push si
    10                              <1> 
    11                              <1>     ; 引数を取得
    12 000000C6 8B7604              <1>     mov si, [bp + 4] ; SI = 文字列へのアドレス
    13                              <1> 
    14                              <1>     ; 処理の開始
    15 000000C9 B40E                <1>     mov ah, 0x0E    ; テレタイプ式1文字出力
    16 000000CB BB0000              <1>     mov bx, 0x0000  ; ページ番号と文字色を0に設定
    17 000000CE FC                  <1>     cld             ; DF = 0; // アドレス加算
    18                              <1> .10L:               ; do
    19                              <1>                     ; {
    20 000000CF AC                  <1>     lodsb           ;   AL = *SI++;
    21                              <1>                     ;
    22 000000D0 3C00                <1>     cmp al, 0       ; if (0 == AL)
    23 000000D2 7404                <1>     je .10E         ;   break;
    24                              <1>                     ;
    25 000000D4 CD10                <1>     int 0x10        ; int 10(0x0E, AL); // 文字出力
    26 000000D6 EBF7                <1>     jmp .10L        ;
    27                              <1> .10E:               ; } while (1);
    28                              <1> 
    29                              <1>     ; レジスタの復帰
    30 000000D8 5E                  <1>     pop si
    31 000000D9 5B                  <1>     pop bx
    32 000000DA 58                  <1>     pop ax
    33                              <1> 
    34                              <1>     ; スタックフレームの破棄
    35 000000DB 89EC                <1>     mov sp, bp
    36 000000DD 5D                  <1>     pop bp
    37                              <1> 
    38 000000DE C3                  <1>     ret
    84                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ; メッセージを表示
     3 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl puts, .s0 ; // 再起動メッセージを表示
     3 000000E7 02                  <1>
     4                              <1> 
     5                              <1>         ; キー入力待ち
     6                              <1> .10L:                   ; do
     7                              <1>                         ; {
     8 000000E8 B410                <1>         mov ah, 0x10    ;   // キー入力待ち
     9 000000EA CD16                <1>         int 0x16        ;   AL = BIOS(0x16, 0x10);
    10                              <1>                         ;
    11 000000EC 3C20                <1>         cmp al, ' '     ;   ZF = AL === ' ';
    12 000000EE 75F8                <1>         jne .10L        ; }
    13                              <1> 
    14                              <1>         ; 改行を出力
    15 000000F0 68[1901]E8CAFF83C4- <1>         cdecl puts, .s1 ; 改行
    15 000000F8 02                  <1>
    16                              <1> 
    17                              <1>         ; 再起動
    18 000000F9 CD19                <1>         int 0x19        ; BIOS(0x19); reboot();
    19                              <1> 
    20                              <1>         ; 文字列データ
    21 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 00000104 414345206B65792074- <1>
    21 0000010D 6F207265626F6F742E- <1>
    21 00000116 2E2E00              <1>
    22 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    85                                  %include "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;     +8| コピー先
     4                              <1>                 ;     +6| セクタ数
     5                              <1>                 ;     +4| パラメータバッファ
     6                              <1>                 ; ------+----------------
     7                              <1>                 ;     +2| IP（戻り番地)
     8 0000011E 55                  <1>     push bp     ; BP + 0| BP（元の値）
     9 0000011F 89E5                <1>     mov bp, sp  ; ------+----------------
    10 00000121 6A03                <1>     push 3      ;     -2| retry = 3; // リトライ回数
    11 00000123 6A00                <1>     push 0      ;     -4| sect = 0; // 読み込みセクタ数
    12                              <1> 
    13                              <1>     ; レジスタの保存
    14 00000125 53                  <1>     push bx
    15 00000126 51                  <1>     push cx
    16 00000127 52                  <1>     push dx
    17 00000128 06                  <1>     push es
    18 00000129 56                  <1>     push si
    19                              <1> 
    20                              <1>     ; 処理の開始
    21 0000012A 8B7604              <1>     mov si, [bp + 4]    ; SI = SRCバッファ;
    22                              <1> 
    23                              <1>     ; CXレジスタの保存
    24                              <1>     ; (BIOSコールの呼び出しに適した形に変換)
    25 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]   ; CH = シリンダ番号（下位バイト）
    26 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]   ; CL = シリンダ番号（上位バイト）
    27 00000133 C0E106              <1>     shl cl, 6                       ; CL <<= 6; // 最上位2ビットにシフト
    28 00000136 0A4C06              <1>     or cl, [si + drive.sect]        ; CL |= セクタ番号;
    29                              <1> 
    30                              <1>     ; セクタ読み込み
    31 00000139 8A7404              <1>     mov dh, [si + drive.head]       ; DH = ヘッド番号;
    32 0000013C 8A14                <1>     mov dl, [si + 0]                ; DL = ドライブ番号;
    33 0000013E B80000              <1>     mov ax, 0x0000                  ; AX = 0x0000;
    34 00000141 8EC0                <1>     mov es, ax                      ; ES = セグメント
    35 00000143 8B5E08              <1>     mov bx, [bp + 8]                ; BX = コピー先;
    36                              <1> .10L:                               ; do
    37                              <1>                                     ; {
    38 00000146 B402                <1>     mov ah, 0x02                    ;   AH = セクタ読み込み
    39 00000148 8A4606              <1>     mov al, [bp + 6]                ;   AL = セクタ数
    40                              <1> 
    41 0000014B CD13                <1>     int 0x13                        ;   CF = BIOS(0x13, 0x02);
    42 0000014D 7304                <1>     jnc .11E                        ;   if (CF)
    43                              <1>                                     ;   {
    44 0000014F B000                <1>     mov al, 0                       ;       AL = 0;
    45 00000151 EB0C                <1>     jmp .10E                        ;       break;
    46                              <1> .11E:                               ;   }
    47                              <1> 
    48 00000153 3C00                <1>     cmp al, 0                       ;   if (読み込んだセクタがあれば)
    49 00000155 7508                <1>     jne .10E                        ;       break;
    50                              <1> 
    51 00000157 B80000              <1>     mov ax, 0                       ;   ret = 0; // 戻り値設定
    52 0000015A FF4EFE              <1>     dec word [bp - 2]               ; }
    53 0000015D 75E7                <1>     jnz .10L                        ; while (-retry);
    54                              <1> .10E:
    55 0000015F B400                <1>     mov ah, 0                       ; AH = 0; // ステータス情報は破棄
    56                              <1> 
    57                              <1>     ; レジスタの復帰　
    58 00000161 5E                  <1>     pop si
    59 00000162 07                  <1>     pop es
    60 00000163 5A                  <1>     pop dx
    61 00000164 59                  <1>     pop cx
    62 00000165 5B                  <1>     pop bx
    63                              <1> 
    64                              <1>     ; スタックフレームの破棄
    65 00000166 89EC                <1>     mov sp, bp
    66 00000168 5D                  <1>     pop bp
    67                              <1> 
    68 00000169 C3                  <1>     ret
    86                                  
    87                                  ;********************************************
    88                                  ; ブートフラグ（先頭512バイトの終了）
    89                                  ;********************************************
    90 0000016A 00<rept>                    times 510 - ($ - $$) db 0x00
    91 000001FE 55AA                        db 0x55, 0xAA
    92                                  
    93                                  ;********************************************
    94                                  ; リアルモード時に取得した情報
    95                                  ;********************************************
    96                                  FONT:
    97 00000200 0000                    .seg: dw 0
    98 00000202 0000                    .off: dw 0
    99                                  ACPI_DATA:
   100 00000204 00000000                .adr: dd 0
   101 00000208 00000000                .len: dd 0
   102                                  
   103                                  ;********************************************
   104                                  ; モジュール（先頭512バイト以降に配置)
   105                                  ;********************************************
   106                                  %include "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ; スタックフレームの構築
     3 0000020C 55                  <1>         push bp
     4 0000020D 89E5                <1>         mov bp, sp
     5                              <1> 
     6                              <1>         ; レジスタの保存
     7 0000020F 50                  <1>         push ax
     8 00000210 53                  <1>         push bx
     9 00000211 51                  <1>         push cx
    10 00000212 52                  <1>         push dx
    11 00000213 56                  <1>         push si
    12 00000214 57                  <1>         push di
    13                              <1> 
    14                              <1>         ; 引数を取得
    15 00000215 8B4604              <1>         mov ax, [bp + 4]                        ; val = 数値
    16 00000218 8B7606              <1>         mov si, [bp + 6]                        ; dst = バッファアドレス
    17 0000021B 8B4E08              <1>         mov cx, [bp + 8]                        ; size = 残りバッファサイズ
    18                              <1> 
    19 0000021E 89F7                <1>         mov di, si
    20 00000220 01CF                <1>         add di, cx                              ; dst = &dst[size - 1]
    21 00000222 4F                  <1>         dec di
    22                              <1> 
    23 00000223 8B5E0C              <1>         mov bx, word[bp + 12]                   ; flags = オプション
    24                              <1> 
    25                              <1>         ; 符号付き判定
    26 00000226 F7C30100            <1>         test bx, 0b0001
    27                              <1> .10Q:
    28 0000022A 7408                <1>         je .10E
    29 0000022C 83F800              <1>         cmp ax, 0
    30                              <1> .12Q:
    31 0000022F 7D03                <1>         jge .12E
    32 00000231 83CB02              <1>         or bx, 0b0010
    33                              <1> .12E:
    34                              <1> .10E:
    35                              <1> 
    36                              <1>         ; 符号出力判定
    37 00000234 F7C30200            <1>         test bx, 0b0010
    38                              <1> .20Q:
    39 00000238 7410                <1>         je .20E
    40 0000023A 83F800              <1>         cmp ax, 0
    41                              <1> .22Q:
    42 0000023D 7D07                <1>         jge .22F
    43 0000023F F7D8                <1>         neg ax
    44 00000241 C6042D              <1>         mov [si], byte '-'
    45 00000244 EB03                <1>         jmp .22E
    46                              <1> .22F:
    47 00000246 C6042B              <1>         mov [si], byte '+'
    48                              <1> .22E:
    49 00000249 49                  <1>         dec cx
    50                              <1> .20E:
    51                              <1> 
    52                              <1>         ; ASCII変換
    53 0000024A 8B5E0A              <1>         mov bx, [bp + 10]
    54                              <1> .30L:
    55 0000024D BA0000              <1>         mov dx, 0
    56 00000250 F7F3                <1>         div bx
    57                              <1> 
    58 00000252 89D6                <1>         mov si, dx
    59 00000254 8A94[7C02]          <1>         mov dl, byte[.ascii + si]
    60                              <1> 
    61 00000258 8815                <1>         mov [di], dl
    62 0000025A 4F                  <1>         dec di
    63                              <1> 
    64 0000025B 83F800              <1>         cmp ax, 0
    65 0000025E E0ED                <1>         loopnz .30L
    66                              <1> .30E:
    67                              <1> 
    68                              <1>         ; 空欄を埋める
    69 00000260 83F900              <1>         cmp cx, 0
    70                              <1> .40Q:
    71 00000263 740D                <1>         je .40E
    72 00000265 B020                <1>         mov al, ' '
    73 00000267 837E0C04            <1>         cmp [bp + 12], word 0b0100
    74                              <1> .42Q:
    75 0000026B 7502                <1>         jne .42E
    76 0000026D B030                <1>         mov al, '0'
    77                              <1> .42E:
    78 0000026F FD                  <1>         std
    79 00000270 F3AA                <1>         rep stosb
    80                              <1> .40E:
    81                              <1> 
    82                              <1>         ; レジスタの復帰
    83 00000272 5F                  <1>         pop di
    84 00000273 5E                  <1>         pop si
    85 00000274 5A                  <1>         pop dx
    86 00000275 59                  <1>         pop cx
    87 00000276 5B                  <1>         pop bx
    88 00000277 58                  <1>         pop ax
    89                              <1> 
    90                              <1>         ; 【スタックフレームの破棄】
    91 00000278 89EC                <1>         mov sp, bp
    92 0000027A 5D                  <1>         pop bp
    93                              <1> 
    94 0000027B C3                  <1>         ret
    95                              <1> 
    96 0000027C 303132333435363738- <1> .ascii db "0123456789ABCDEF"
    96 00000285 39414243444546      <1>
   107                                  %include "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;    + 4 | パラメータバッファ
     4                              <1>                 ;    + 2 | IP(戻り番地)
     5 0000028C 55                  <1>     push bp     ; BP + 0 | BP(元の値)
     6 0000028D 89E5                <1>     mov bp, sp  ; -------+----------------
     7                              <1> 
     8                              <1>     ; レジスタの保存
     9 0000028F 53                  <1>     push bx
    10 00000290 51                  <1>     push cx
    11 00000291 06                  <1>     push es
    12 00000292 56                  <1>     push si
    13 00000293 57                  <1>     push di
    14                              <1> 
    15                              <1>     ; 処理の開始
    16 00000294 8B7604              <1>     mov si, [bp + 4]            ; SI = バッファ
    17                              <1> 
    18 00000297 B80000              <1>     mov ax, 0                   ; Disk Base Table Pointerの初期化
    19 0000029A 8EC0                <1>     mov es, ax                  ; ES = 0;
    20 0000029C 89C7                <1>     mov di, ax                  ; DI = 0;
    21                              <1> 
    22 0000029E B408                <1>     mov ah, 8                   ; // get drive parameters
    23 000002A0 8B3C                <1>     mov di, [si + drive.no]     ; DL = ドライブ番号
    24 000002A2 CD13                <1>     int 0x13                    ; CF = BIOS(0x13, 8);
    25 000002A4 721B                <1> .10Q: jc .10F                   ; if (0 == CF)
    26                              <1> .10T:                           ; {
    27 000002A6 88C8                <1>     mov al, cl                  ;   AX = セクタ数
    28 000002A8 83E03F              <1>     and ax, 0x3F                ;   // 下位6ビットのみ有効
    29                              <1> 
    30 000002AB C0E906              <1>     shr cl, 6                   ;   CX = シリンダ数
    31 000002AE C1C908              <1>     ror cx, 8                   ;
    32 000002B1 41                  <1>     inc cx                      ;
    33                              <1> 
    34 000002B2 0FB6DE              <1>     movzx bx, dh                ;   BX = ヘッド数(1ベース)
    35 000002B5 43                  <1>     inc bx                      ;
    36                              <1> 
    37 000002B6 894C02              <1>     mov [si + drive.cyln], cx   ;   drive.syln = CX; // C:シリンダ数
    38 000002B9 895C04              <1>     mov [si + drive.head], bx   ;   drive.head = BX; // H:ヘッド数
    39 000002BC 894406              <1>     mov [si + drive.sect], ax   ;   drive.sect = AX; // S:セクト数
    40                              <1> 
    41 000002BF EB03                <1>     jmp .10E                    ; }
    42                              <1> .10F:                           ; else
    43                              <1>                                 ; {
    44 000002C1 B80000              <1>     mov ax, 0                   ;   AX = 0; // 失敗
    45                              <1> .10E:                           ; }
    46                              <1> 
    47                              <1>     ; レジスタの復帰
    48 000002C4 5F                  <1>     pop di
    49 000002C5 5E                  <1>     pop si
    50 000002C6 07                  <1>     pop es
    51 000002C7 59                  <1>     pop cx
    52 000002C8 5B                  <1>     pop bx
    53                              <1> 
    54                              <1>     ; スタックフレームの破棄
    55 000002C9 89EC                <1>     mov sp, bp
    56 000002CB 5D                  <1>     pop bp
    57                              <1> 
    58 000002CC C3                  <1>     ret
   108                                  %include "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                         ; -------+---------------------
     4                              <1>                         ;    + 4 | フォントアドレス格納位置
     5                              <1>                         ;    + 2 | IP
     6 000002CD 55                  <1>     push bp             ; BP + 0 | BP
     7 000002CE 89E5                <1>     mov bp, sp          ; -------+---------------------
     8                              <1> 
     9                              <1>     ; レジスタの保存
    10 000002D0 50                  <1>     push ax
    11 000002D1 53                  <1>     push bx
    12 000002D2 56                  <1>     push si
    13 000002D3 06                  <1>     push es
    14 000002D4 55                  <1>     push bp
    15                              <1> 
    16                              <1>     ; 引数を取得
    17 000002D5 8B7604              <1>     mov si, [bp + 4]    ; dst = FONTアドレスの保存先;
    18                              <1> 
    19                              <1>     ; フォントアドレスの取得
    20 000002D8 B83011              <1>     mov ax, 0x1130      ; //フォントアドレスの取得
    21 000002DB B706                <1>     mov bh, 0x06        ; 8x16 font(vga/mcga)
    22 000002DD CD10                <1>     int 10h             ; ES:BP=FONT ADDRESS
    23                              <1> 
    24                              <1>     ; FONTアドレスを保存
    25 000002DF 8C04                <1>     mov [si + 0], es    ; dst[0] = セグメンt;
    26 000002E1 896C02              <1>     mov [si + 2], bp    ; dst[1] = オフセット;
    27                              <1> 
    28                              <1>     ; レジスタの復帰
    29 000002E4 5D                  <1>     pop bp
    30 000002E5 07                  <1>     pop es
    31 000002E6 5E                  <1>     pop si
    32 000002E7 5B                  <1>     pop bx
    33 000002E8 58                  <1>     pop ax
    34                              <1> 
    35                              <1>     ; スタックフレームの破棄
    36 000002E9 89EC                <1>     mov sp, bp
    37 000002EB 5D                  <1>     pop bp
    38                              <1> 
    39 000002EC C3                  <1>     ret
   109                                  %include "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1>     ;-----------------------------
     3                              <1>     ; レジスタの保存
     4                              <1>     ;-----------------------------
     5 000002ED 6650                <1>     push eax
     6 000002EF 6653                <1>     push ebx
     7 000002F1 6651                <1>     push ecx
     8 000002F3 6652                <1>     push edx
     9 000002F5 56                  <1>     push si
    10 000002F6 57                  <1>     push di
    11 000002F7 55                  <1>     push bp
    12                              <1> 
    13 000002F8 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    14                              <1> 
    15 0000030C BD0000              <1>     mov bp, 0                   ; lines = 0; // 行数
    16 0000030F 66BB00000000        <1>     mov ebx, 0                  ; index = 0; // インデックスを初期化
    17                              <1> .10L:                           ; do
    18                              <1>                                 ; {
    19 00000315 66B820E80000        <1>     mov eax, 0x0000E820         ;   EAX = 0xE820
    20                              <1>                                 ;   EBX = インデックス
    21 0000031B 66B914000000        <1>     mov ecx, E820_RECORD_SIZE   ;   ECX = 要求バイト数
    22 00000321 66BA50414D53        <1>     mov edx, 'PAMS'             ;   EDX = 'SMAP';
    23 00000327 BF[F802]            <1>     mov di, .b0                 ;   ES:DI = バッファ
    24 0000032A CD15                <1>     int 0x15                    ;   BIOS(0x15, 0xE820);
    25                              <1> 
    26                              <1>     ; コマンド対応か？
    27 0000032C 663D50414D53        <1>     cmp eax, 'PAMS'             ;   if ('SMAP' != EAX)
    28 00000332 7402                <1>     je .12E                     ;   {
    29 00000334 EB4C                <1>     jmp .10E                    ;       break; // コマンド未対応
    30                              <1> .12E:                           ;   }
    31                              <1> 
    32                              <1>     ; エラーなし？                ;   if (CF)
    33 00000336 7302                <1>     jnc .14E                    ;   {
    34 00000338 EB48                <1>     jmp .10E                    ;       break; // エラー発生
    35                              <1> .14E:                           ;   }
    36                              <1> 
    37                              <1>     ; 1レコード分のメモリ情報を表示
    38 0000033A 57E8570083C402      <1>     cdecl put_mem_info, di      ;   1レコード分のメモリ情報を表示
    39                              <1> 
    40                              <1>     ; ACPI dataのアドレスを取得
    41 00000341 668B4510            <1>     mov eax, [di + 16]          ;   EAX = レコードタイプ;
    42 00000345 6683F803            <1>     cmp eax, 3                  ;   if (3 == EAX) // ACPI data
    43 00000349 750F                <1>     jne .15E                    ;   {
    44                              <1>                                 ;
    45 0000034B 668B05              <1>     mov eax, [di + 0]           ;       EAX = BASEアドレス;
    46 0000034E 66A3[0402]          <1>     mov [ACPI_DATA.adr], eax    ;       ACPI_DATA.adr = EAX;
    47                              <1>                                 ;
    48 00000352 668B4508            <1>     mov eax, [di + 8]           ;       EAX = Length;
    49 00000356 66A3[0802]          <1>     mov [ACPI_DATA.len], eax    ;       ACPI_DATA.len = EAX;
    50                              <1> .15E:                           ;   }
    51                              <1> 
    52 0000035A 6683FB00            <1>     cmp ebx, 0                  ;   if (0 != EBX)
    53 0000035E 741C                <1>     jz .16E                     ;   {
    54                              <1>                                 ;
    55 00000360 45                  <1>     inc bp                      ;       lines++;
    56 00000361 83E507              <1>     and bp, 0x07                ;       lines &= 0x07;
    57 00000364 7516                <1>     jnz .16E                    ;       if (0 == lines)
    58                              <1>                                 ;       {
    59 00000366 68[8203]E854FD83C4- <1>     cdecl puts, .s2             ;           // 中断メッセージを表示
    59 0000036E 02                  <1>
    60                              <1>                                 ;
    61 0000036F B410                <1>     mov ah, 0x10                ;           // キー入力待ち
    62 00000371 CD16                <1>     int 0x16                    ;           AL = BIOS(0x16, 0x10);
    63                              <1>                                 ;
    64 00000373 68[8C03]E847FD83C4- <1>     cdecl puts, .s3             ;           // 中断メッセージを消去
    64 0000037B 02                  <1>
    65                              <1>                                 ;       }
    66                              <1> .16E:                           ;   }
    67 0000037C 6683FB00            <1>     cmp ebx, 0                  ;
    68 00000380 7593                <1>     jne .10L                    ; }
    69                              <1> .10E:                           ; while (0 == EBX);
    70                              <1> 
    71 00000382 3C6D6F72652E2E2E3E- <1> .s2 db "<more...>", 0
    71 0000038B 00                  <1>
    72 0000038C 0D2020202020200D00  <1> .s3 db 0x0D, "      ", 0x0D, 0
    73                              <1> 
    74                              <1> put_mem_info:
    75                              <1>     ;----------------------------- 
    76                              <1>     ; スタックフレームの構築
    77                              <1>     ;-----------------------------
    78                              <1>                                 ;    + 4 | バッファアドレス
    79                              <1>                                 ;    + 2 | IP
    80 00000395 55                  <1>     push bp                     ; BP + 0 | BP(元の値)
    81 00000396 89E5                <1>     mov bp, sp                  ;--------+---------------
    82                              <1> 
    83                              <1>     ;----------------------------- 
    84                              <1>     ; レジスタの保存
    85                              <1>     ;-----------------------------
    86 00000398 53                  <1>     push bx
    87 00000399 56                  <1>     push si
    88                              <1> 
    89                              <1>     ;-----------------------------
    90                              <1>     ; 引数を取得
    91                              <1>     ;-----------------------------
    92 0000039A 8B7604              <1>     mov si, [bp + 4]            ; SI = バッファアドレス
    93                              <1> 
    94                              <1>     ; Base(64bit)
    95 0000039D 6A046A106A0468-     <1>     cdecl itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    95 000003A4 [7404]FF7406E860FE- <1>
    95 000003AC 83C40A              <1>
    96 000003AF 6A046A106A0468-     <1>     cdecl itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
    96 000003B6 [7804]FF7404E84EFE- <1>
    96 000003BE 83C40A              <1>
    97 000003C1 6A046A106A0468-     <1>     cdecl itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
    97 000003C8 [7D04]FF7402E83CFE- <1>
    97 000003D0 83C40A              <1>
    98 000003D3 6A046A106A0468-     <1>     cdecl itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
    98 000003DA [8104]FF34E82BFE83- <1>
    98 000003E2 C40A                <1>
    99                              <1> 
   100                              <1>     ; Length(64bit)
   101 000003E4 6A046A106A0468-     <1>     cdecl itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
   101 000003EB [8604]FF740EE819FE- <1>
   101 000003F3 83C40A              <1>
   102 000003F6 6A046A106A0468-     <1>     cdecl itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
   102 000003FD [8A04]FF740CE807FE- <1>
   102 00000405 83C40A              <1>
   103 00000408 6A046A106A0468-     <1>     cdecl itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
   103 0000040F [8F04]FF740AE8F5FD- <1>
   103 00000417 83C40A              <1>
   104 0000041A 6A046A106A0468-     <1>     cdecl itoa, word [si +  8], .p5 + 4, 4, 16, 0b0100  
   104 00000421 [9304]FF7408E8E3FD- <1>
   104 00000429 83C40A              <1>
   105                              <1>     
   106                              <1>     ; Type(32bit)
   107 0000042C 6A046A106A0468-     <1>     cdecl itoa, word [si + 18], .p6 + 0, 4, 16, 0b0100
   107 00000433 [9804]FF7412E8D1FD- <1>
   107 0000043B 83C40A              <1>
   108 0000043E 6A046A106A0468-     <1>     cdecl itoa, word [si + 16], .p6 + 4, 4, 16, 0b0100
   108 00000445 [9C04]FF7410E8BFFD- <1>
   108 0000044D 83C40A              <1>
   109                              <1> 
   110 00000450 68[7304]E86AFC83C4- <1>     cdecl puts, .s1             ; レコード情報を表示
   110 00000458 02                  <1>
   111                              <1> 
   112 00000459 8B5C10              <1>     mov bx, [si + 16]           ; // タイプを文字列で表示
   113 0000045C 83E307              <1>     and bx, 0x07                ; BX = Type(0~5)
   114 0000045F D1E3                <1>     shl bx, 1                   ; BX *= 2; // 要素サイズに変換
   115 00000461 81C3[F504]          <1>     add bx, .t0                 ; BX += .t0; // テーブルの先頭アドレスを加算
   116 00000465 FF37E856FC83C402    <1>     cdecl puts, word [bx]       ; puts(*BX);
   117                              <1> 
   118                              <1>     ;-----------------------------
   119                              <1>     ; レジスタの復帰
   120                              <1>     ;-----------------------------
   121 0000046D 5E                  <1>     pop si
   122 0000046E 5B                  <1>     pop bx
   123                              <1> 
   124                              <1>     ;-----------------------------
   125                              <1>     ; スタックフレームの破棄
   126                              <1>     ;-----------------------------
   127 0000046F 89EC                <1>     mov sp, BP
   128 00000471 5D                  <1>     pop bp
   129                              <1> 
   130 00000472 C3                  <1>     ret
   131                              <1> 
   132                              <1>     ;-----------------------------
   133                              <1>     ; データ
   134                              <1>     ;-----------------------------
   135 00000473 20                  <1> .s1: db " "
   136 00000474 5A5A5A5A5A5A5A5A5F  <1> .p2: db "ZZZZZZZZ_"
   137 0000047D 5A5A5A5A5A5A5A5A20  <1> .p3: db "ZZZZZZZZ "
   138 00000486 5A5A5A5A5A5A5A5A5F  <1> .p4: db "ZZZZZZZZ_"
   139 0000048F 5A5A5A5A5A5A5A5A20  <1> .p5: db "ZZZZZZZZ "
   140 00000498 5A5A5A5A5A5A5A5A00  <1> .p6: db "ZZZZZZZZ", 0
   141                              <1> 
   142 000004A1 2028556E6B6E6F776E- <1> .s4: db " (Unknown)", 0x0A, 0x0D, 0
   142 000004AA 290A0D00            <1>
   143 000004AE 2028757361626C6529- <1> .s5: db " (usable)", 0x0A, 0x0D, 0
   143 000004B7 0A0D00              <1>
   144 000004BA 202872657365727665- <1> .s6: db " (reserved)", 0x0A, 0x0D, 0
   144 000004C3 64290A0D00          <1>
   145 000004C8 202841435049206461- <1> .s7: db " (ACPI data)", 0x0A, 0x0D, 0
   145 000004D1 7461290A0D00        <1>
   146 000004D7 202841435049204E56- <1> .s8: db " (ACPI NVS)", 0x0A, 0x0D, 0
   146 000004E0 53290A0D00          <1>
   147 000004E5 2028626164206D656D- <1> .s9: db " (bad memory)", 0x0A, 0x0D, 0
   147 000004EE 6F7279290A0D00      <1>
   148                              <1> 
   149 000004F5 [A104][AE04][BA04]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   149 000004FB [C804][D704][E504]- <1>
   149 00000501 [A104][A104]        <1>
   110                                  
   111                                  ;********************************************
   112                                  ; ブート処理の第2ステージ
   113                                  ;********************************************
   114                                  stage_2:
   115                                      ;---------------------------
   116                                      ; 文字列を表示
   117                                      ;---------------------------
   118 00000505 68[7F05]E8B5FB83C4-         cdecl puts, .s0
   118 0000050D 02                 
   119                                  
   120                                      ;---------------------------
   121                                      ; ドライブ情報を取得
   122                                      ;---------------------------
   123 0000050E 68[B800]E878FD83C4-         cdecl get_drive_param, BOOT         ; get_drive_param(DX, BOOT.CYLN);
   123 00000516 02                 
   124 00000517 83F800                      cmp ax, 0                           ; if (0 == AX)
   125 0000051A 750C                    .10Q: jne .10E                          ; {
   126 0000051C 68[B605]E89EFB83C4-     .10T: cdecl puts, .e0                   ;   puts(.e0);
   126 00000524 02                 
   127 00000525 E8B7FB                      call reboot                         ;   reboot; //再起動
   128                                  .10E:                                   ; }
   129                                  
   130                                      ;---------------------------
   131                                      ; ドライブ情報を表示
   132                                      ;---------------------------
   133 00000528 A1[B800]                    mov ax, [BOOT + drive.no]           ; AX = ブートドライブ;
   134 0000052B 6A046A106A0268-             cdecl itoa, ax, .p1, 2, 16, 0b0100  ;
   134 00000532 [9705]50E8D4FC83C4-
   134 0000053A 0A                 
   135 0000053B A1[BA00]                    mov ax, [BOOT + drive.cyln]         ;
   136 0000053E 6A046A106A0468-             cdecl itoa, ax, .p2, 4, 16, 0b0100  ;
   136 00000545 [9F05]50E8C1FC83C4-
   136 0000054D 0A                 
   137 0000054E A1[BC00]                    mov ax, [BOOT + drive.head]         ; AX = ヘッド数;
   138 00000551 6A046A106A0268-             cdecl itoa, ax, .p3, 2, 16, 0b0100  ;
   138 00000558 [A905]50E8AEFC83C4-
   138 00000560 0A                 
   139 00000561 A1[BE00]                    mov ax, [BOOT + drive.sect]         ; AX = トラックあたりのセクタ数;
   140 00000564 6A046A106A0268-             cdecl itoa, ax, .p4, 2, 16, 0b0100  ;
   140 0000056B [B105]50E89BFC83C4-
   140 00000573 0A                 
   141 00000574 68[8E05]E846FB83C4-         cdecl puts, .s1
   141 0000057C 02                 
   142                                      
   143                                      ;---------------------------
   144                                      ; 次のステージへ移行
   145                                      ;---------------------------
   146 0000057D EB52                        jmp stage_3rd
   147                                  
   148                                      ;---------------------------
   149                                      ; データ
   150                                      ;---------------------------
   151 0000057F 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   151 00000588 2E2E2E0A0D00       
   152 0000058E 2044726976653A3078      .s1 db " Drive:0x"
   153 00000597 20202C20433A3078        .p1 db "  , C:0x"
   154 0000059F 202020202C20483A30-     .p2 db "    , H:0x"
   154 000005A8 78                 
   155 000005A9 20202C20533A3078        .p3 db "  , S:0x"
   156 000005B1 20200A0D00              .p4 db "  ", 0x0A, 0x0D, 0
   157 000005B6 43616E277420676574-     .e0 db "Can't get drive parameter.", 0
   157 000005BF 206472697665207061-
   157 000005C8 72616D657465722E00 
   158                                  
   159                                  ;********************************************
   160                                  ; ブート処理の第３ステージ
   161                                  ;********************************************
   162                                  stage_3rd:
   163                                      ;--------------------------
   164                                      ; 文字列を表示
   165                                      ;--------------------------
   166 000005D1 68[4E06]E8E9FA83C4-         cdecl puts, .s0
   166 000005D9 02                 
   167                                  
   168                                      ;--------------------------
   169                                      ; プロテクトモードで使用するフォントは
   170                                      ; BIOSに内臓されたものを流用する
   171                                      ;--------------------------
   172 000005DA 68[0002]E8EDFC83C4-         cdecl get_font_adr, FONT            ;// BIOSのフォント
   172 000005E2 02                 
   173                                  
   174                                      ;--------------------------
   175                                      ; フォントアドレスの表示
   176                                      ;--------------------------
   177 000005E3 6A046A106A0468-             cdecl itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   177 000005EA [6A06]FF36[0002]E8-
   177 000005F1 19FC83C40A         
   178 000005F6 6A046A106A0468-             cdecl itoa, word [FONT.off], .p2, 4, 16, 0b0100
   178 000005FD [6E06]FF36[0202]E8-
   178 00000604 06FC83C40A         
   179 00000609 68[5D06]E8B1FA83C4-         cdecl puts, .s1
   179 00000611 02                 
   180                                  
   181                                      ;--------------------------
   182                                      ; メモリ情報の取得と表示
   183                                      ;--------------------------
   184 00000612 E8D8FC                      cdecl get_mem_info                  ; get_mem_info();
   185                                  
   186 00000615 66A1[0402]                  mov eax, [ACPI_DATA.adr]            ; EAX = ACPI_DATA.adr;
   187 00000619 6683F800                    cmp eax, 0                          ; if (EAX)
   188 0000061D 742D                        je .10E                             ; {
   189                                  
   190 0000061F 6A046A106A0468-             cdecl itoa, ax, .p4, 4, 16, 0b0100  ;   itoa(AX); // 下位アドレスを変換
   190 00000626 [8606]50E8E0FB83C4-
   190 0000062E 0A                 
   191 0000062F 66C1E800                    shr eax, 0                          ;   EAX >>= 16;
   192 00000633 6A046A106A0468-             cdecl itoa, ax, .p3, 4, 16, 0b0100  ;   itoa(AX); // 上位アドレスを変換
   192 0000063A [8206]50E8CCFB83C4-
   192 00000642 0A                 
   193                                  
   194 00000643 68[7806]E877FA83C4-         cdecl puts, .s2                     ;   puts(.s2); // アドレスを表示
   194 0000064B 02                 
   195                                  .10E:                                   ; }
   196                                  
   197                                      ;--------------------------
   198                                      ; 処理の終了
   199                                      ;--------------------------
   200 0000064C EBFE                        jmp $
   201                                  
   202                                      ;--------------------------
   203                                      ; データ
   204                                      ;--------------------------
   205 0000064E 337264207374616765-     .s0 db "3rd stage...", 0x0A, 0x0D, 0
   205 00000657 2E2E2E0A0D00       
   206                                  
   207 0000065D 466F6E742041646472-     .s1 db "Font Address="
   207 00000666 6573733D           
   208 0000066A 5A5A5A5A                .p1 db "ZZZZ"
   209 0000066E 5A5A5A5A0A0D00          .p2 db "ZZZZ", 0x0A, 0x0D, 0
   210 00000675 0A0D00                      db 0x0A, 0x0D, 0
   211                                  
   212 00000678 414350492064617461-     .s2 db "ACPI data="
   212 00000681 3D                 
   213 00000682 5A5A5A5A                .p3 db "ZZZZ"
   214 00000686 5A5A5A5A0A0D00          .p4 db "ZZZZ", 0x0A, 0x0D, 0
   215                                  
   216 0000068D 43616E6E6F74206765-     .e0 db "Cannot get drive parameter.", 0
   216 00000696 742064726976652070-
   216 0000069F 6172616D657465722E-
   216 000006A8 00                 
   217                                  
   218                                  ;********************************************
   219                                  ; バディング（このファイルは8Kバイトとする)
   220                                  ;********************************************
   221 000006A9 00<rept>                    times BOOT_SIZE - ($ - $$) db 0 ; バディング
