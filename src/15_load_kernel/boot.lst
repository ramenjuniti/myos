     1                                  ;***********************************************************
     2                                  ;  マクロ
     3                                  ;***********************************************************
     4                                  %include "../include/define.s"
     1                              <1> BOOT_SIZE equ (1024 * 8)                    ; ブートコードサイズ
     2                              <1> KERNEL_SIZE equ (1024 * 8)                  ; カーネルサイズ
     3                              <1> 
     4                              <1> BOOT_LOAD equ 0x7C00                        ; ブートプログラムのロード位置
     5                              <1> BOOT_END equ (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1> SECT_SIZE equ (512)                         ; セクタサイズ
     8                              <1> 
     9                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)       ; ブートプログラムのセクタ数
    10                              <1> KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)
    11                              <1> 
    12                              <1> E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1> KERNEL_LOAD equ 0x0010_1000
    15                              <1> 
     5                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate - 1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no resw 1      ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln resw 1    ; シリンダ
    20 00000004 <res 00000002>      <1>     .head resw 1    ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect resw 1    ; セクタ
    22                              <1> endstruc
     6                                  
     7                                          ORG BOOT_LOAD
     8                                  
     9                                  ;***********************************************************
    10                                  ;  エントリポイント
    11                                  ;***********************************************************
    12                                  entry:
    13                                          ;------------------------------------------
    14                                          ; BPB(BIOS Parameter Block)
    15                                          ;------------------------------------------
    16 00000000 EB58                            jmp ipl
    17 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    18                                  
    19                                          ;------------------------------------------
    20                                          ; IPL(Initial Program Loader)
    21                                          ;------------------------------------------
    22                                  ipl:
    23 0000005A FA                              cli
    24                                  
    25 0000005B B80000                          mov ax, 0x0000
    26 0000005E 8ED8                            mov ds, ax
    27 00000060 8EC0                            mov es, ax
    28 00000062 8ED0                            mov ss, ax
    29 00000064 BC007C                          mov sp, BOOT_LOAD
    30                                  
    31 00000067 FB                              sti
    32                                  
    33 00000068 8816[B800]                      mov [BOOT + drive.no], dl
    34                                  
    35                                          ;------------------------------------------
    36                                          ; 文字列を表示
    37                                          ;------------------------------------------
    38 0000006C 68[9900]E84E0083C4-             cdecl puts, .s0
    38 00000074 02                 
    39                                  
    40                                          ;------------------------------------------
    41                                          ; 残りのセクタをすべて読み込む
    42                                          ;------------------------------------------
    43 00000075 BB0F00                          mov bx, BOOT_SECT - 1
    44 00000078 B9007E                          mov cx, BOOT_LOAD + SECT_SIZE
    45                                  
    46 0000007B 515368[B800]E89B00-             cdecl read_chs, BOOT, bx, cx
    46 00000083 83C406             
    47                                  
    48 00000086 39D8                            cmp ax, bx
    49                                  .10Q:
    50 00000088 740C                            jz .10E
    51                                  .10T:
    52 0000008A 68[A600]E8300083C4-             cdecl puts, .e0
    52 00000092 02                 
    53 00000093 E84900                          call reboot
    54                                  .10E:
    55                                  
    56                                          ;------------------------------------------
    57                                          ; 次のステージへ移行
    58                                          ;------------------------------------------
    59 00000096 E9D105                          jmp stage_2
    60                                  
    61                                          ;------------------------------------------
    62                                          ; データ
    63                                          ;------------------------------------------
    64 00000099 426F6F74696E672E2E-     .s0     db "Booting...", 0x0A, 0x0D, 0
    64 000000A2 2E0A0D00           
    65 000000A6 4572726F723A736563-     .e0     db "Error:sector read", 0
    65 000000AF 746F72207265616400 
    66                                  
    67                                  ;***********************************************************
    68                                  ;  ブートドライブに関する情報
    69                                  ;***********************************************************
    70                                  ALIGN 2, db 0
    71                                  BOOT:
    72                                          istruc drive
    73 000000B8 0000                                at drive.no, dw 0
    74 000000BA 0000                                at drive.cyln, dw 0
    75 000000BC 0000                                at drive.head, dw 0
    76 000000BE 0200                                at drive.sect, dw 2
    77                                          iend
    78                                  
    79                                  ;***********************************************************
    80                                  ;  モジュール
    81                                  ;***********************************************************
    82                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>     ; スタックフレームの構築
     3 000000C0 55                  <1>     push bp
     4 000000C1 89E5                <1>     mov bp, sp
     5                              <1>     
     6                              <1>     ; レジスタの保存
     7 000000C3 50                  <1>     push ax
     8 000000C4 53                  <1>     push bx
     9 000000C5 56                  <1>     push si
    10                              <1> 
    11                              <1>     ; 引数を取得
    12 000000C6 8B7604              <1>     mov si, [bp + 4] ; SI = 文字列へのアドレス
    13                              <1> 
    14                              <1>     ; 処理の開始
    15 000000C9 B40E                <1>     mov ah, 0x0E    ; テレタイプ式1文字出力
    16 000000CB BB0000              <1>     mov bx, 0x0000  ; ページ番号と文字色を0に設定
    17 000000CE FC                  <1>     cld             ; DF = 0; // アドレス加算
    18                              <1> .10L:               ; do
    19                              <1>                     ; {
    20 000000CF AC                  <1>     lodsb           ;   AL = *SI++;
    21                              <1>                     ;
    22 000000D0 3C00                <1>     cmp al, 0       ; if (0 == AL)
    23 000000D2 7404                <1>     je .10E         ;   break;
    24                              <1>                     ;
    25 000000D4 CD10                <1>     int 0x10        ; int 10(0x0E, AL); // 文字出力
    26 000000D6 EBF7                <1>     jmp .10L        ;
    27                              <1> .10E:               ; } while (1);
    28                              <1> 
    29                              <1>     ; レジスタの復帰
    30 000000D8 5E                  <1>     pop si
    31 000000D9 5B                  <1>     pop bx
    32 000000DA 58                  <1>     pop ax
    33                              <1> 
    34                              <1>     ; スタックフレームの破棄
    35 000000DB 89EC                <1>     mov sp, bp
    36 000000DD 5D                  <1>     pop bp
    37                              <1> 
    38 000000DE C3                  <1>     ret
    83                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>         ; メッセージを表示
     3 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl puts, .s0 ; // 再起動メッセージを表示
     3 000000E7 02                  <1>
     4                              <1> 
     5                              <1>         ; キー入力待ち
     6                              <1> .10L:                   ; do
     7                              <1>                         ; {
     8 000000E8 B410                <1>         mov ah, 0x10    ;   // キー入力待ち
     9 000000EA CD16                <1>         int 0x16        ;   AL = BIOS(0x16, 0x10);
    10                              <1>                         ;
    11 000000EC 3C20                <1>         cmp al, ' '     ;   ZF = AL === ' ';
    12 000000EE 75F8                <1>         jne .10L        ; }
    13                              <1> 
    14                              <1>         ; 改行を出力
    15 000000F0 68[1901]E8CAFF83C4- <1>         cdecl puts, .s1 ; 改行
    15 000000F8 02                  <1>
    16                              <1> 
    17                              <1>         ; 再起動
    18 000000F9 CD19                <1>         int 0x19        ; BIOS(0x19); reboot();
    19                              <1> 
    20                              <1>         ; 文字列データ
    21 000000FB 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 00000104 414345206B65792074- <1>
    21 0000010D 6F207265626F6F742E- <1>
    21 00000116 2E2E00              <1>
    22 00000119 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0
    84                                  %include "../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;     +8| コピー先
     4                              <1>                 ;     +6| セクタ数
     5                              <1>                 ;     +4| パラメータバッファ
     6                              <1>                 ; ------+----------------
     7                              <1>                 ;     +2| IP（戻り番地)
     8 0000011E 55                  <1>     push bp     ; BP + 0| BP（元の値）
     9 0000011F 89E5                <1>     mov bp, sp  ; ------+----------------
    10 00000121 6A03                <1>     push 3      ;     -2| retry = 3; // リトライ回数
    11 00000123 6A00                <1>     push 0      ;     -4| sect = 0; // 読み込みセクタ数
    12                              <1> 
    13                              <1>     ; レジスタの保存
    14 00000125 53                  <1>     push bx
    15 00000126 51                  <1>     push cx
    16 00000127 52                  <1>     push dx
    17 00000128 06                  <1>     push es
    18 00000129 56                  <1>     push si
    19                              <1> 
    20                              <1>     ; 処理の開始
    21 0000012A 8B7604              <1>     mov si, [bp + 4]    ; SI = SRCバッファ;
    22                              <1> 
    23                              <1>     ; CXレジスタの保存
    24                              <1>     ; (BIOSコールの呼び出しに適した形に変換)
    25 0000012D 8A6C02              <1>     mov ch, [si + drive.cyln + 0]   ; CH = シリンダ番号（下位バイト）
    26 00000130 8A4C03              <1>     mov cl, [si + drive.cyln + 1]   ; CL = シリンダ番号（上位バイト）
    27 00000133 C0E106              <1>     shl cl, 6                       ; CL <<= 6; // 最上位2ビットにシフト
    28 00000136 0A4C06              <1>     or cl, [si + drive.sect]        ; CL |= セクタ番号;
    29                              <1> 
    30                              <1>     ; セクタ読み込み
    31 00000139 8A7404              <1>     mov dh, [si + drive.head]       ; DH = ヘッド番号;
    32 0000013C 8A14                <1>     mov dl, [si + 0]                ; DL = ドライブ番号;
    33 0000013E B80000              <1>     mov ax, 0x0000                  ; AX = 0x0000;
    34 00000141 8EC0                <1>     mov es, ax                      ; ES = セグメント
    35 00000143 8B5E08              <1>     mov bx, [bp + 8]                ; BX = コピー先;
    36                              <1> .10L:                               ; do
    37                              <1>                                     ; {
    38 00000146 B402                <1>     mov ah, 0x02                    ;   AH = セクタ読み込み
    39 00000148 8A4606              <1>     mov al, [bp + 6]                ;   AL = セクタ数
    40                              <1> 
    41 0000014B CD13                <1>     int 0x13                        ;   CF = BIOS(0x13, 0x02);
    42 0000014D 7304                <1>     jnc .11E                        ;   if (CF)
    43                              <1>                                     ;   {
    44 0000014F B000                <1>     mov al, 0                       ;       AL = 0;
    45 00000151 EB0C                <1>     jmp .10E                        ;       break;
    46                              <1> .11E:                               ;   }
    47                              <1> 
    48 00000153 3C00                <1>     cmp al, 0                       ;   if (読み込んだセクタがあれば)
    49 00000155 7508                <1>     jne .10E                        ;       break;
    50                              <1> 
    51 00000157 B80000              <1>     mov ax, 0                       ;   ret = 0; // 戻り値設定
    52 0000015A FF4EFE              <1>     dec word [bp - 2]               ; }
    53 0000015D 75E7                <1>     jnz .10L                        ; while (-retry);
    54                              <1> .10E:
    55 0000015F B400                <1>     mov ah, 0                       ; AH = 0; // ステータス情報は破棄
    56                              <1> 
    57                              <1>     ; レジスタの復帰　
    58 00000161 5E                  <1>     pop si
    59 00000162 07                  <1>     pop es
    60 00000163 5A                  <1>     pop dx
    61 00000164 59                  <1>     pop cx
    62 00000165 5B                  <1>     pop bx
    63                              <1> 
    64                              <1>     ; スタックフレームの破棄
    65 00000166 89EC                <1>     mov sp, bp
    66 00000168 5D                  <1>     pop bp
    67                              <1> 
    68 00000169 C3                  <1>     ret
    85                                  
    86                                  ;***********************************************************
    87                                  ;  ブートフラグ(先頭512バイトの終了)
    88                                  ;***********************************************************
    89 0000016A 00<rept>                        times 510 - ($ - $$) db 0x00
    90 000001FE 55AA                            db 0x55, 0xAA
    91                                  
    92                                  ;***********************************************************
    93                                  ;  リアルモード時に取得した情報
    94                                  ;***********************************************************
    95                                  FONT:
    96 00000200 0000                    .seg:   dw 0
    97 00000202 0000                    .off:   dw 0
    98                                  ACPI_DATA:
    99 00000204 00000000                .adr:   dd 0
   100 00000208 00000000                .len:   dd 0
   101                                  
   102                                  ;***********************************************************
   103                                  ;  モジュール(先頭512バイト以降に配置)
   104                                  ;***********************************************************
   105                                  %include "../modules/real/itoa.s"
     1                              <1> itoa:
     2                              <1>         ; スタックフレームの構築
     3 0000020C 55                  <1>         push bp
     4 0000020D 89E5                <1>         mov bp, sp
     5                              <1> 
     6                              <1>         ; レジスタの保存
     7 0000020F 50                  <1>         push ax
     8 00000210 53                  <1>         push bx
     9 00000211 51                  <1>         push cx
    10 00000212 52                  <1>         push dx
    11 00000213 56                  <1>         push si
    12 00000214 57                  <1>         push di
    13                              <1> 
    14                              <1>         ; 引数を取得
    15 00000215 8B4604              <1>         mov ax, [bp + 4]                        ; val = 数値
    16 00000218 8B7606              <1>         mov si, [bp + 6]                        ; dst = バッファアドレス
    17 0000021B 8B4E08              <1>         mov cx, [bp + 8]                        ; size = 残りバッファサイズ
    18                              <1> 
    19 0000021E 89F7                <1>         mov di, si
    20 00000220 01CF                <1>         add di, cx                              ; dst = &dst[size - 1]
    21 00000222 4F                  <1>         dec di
    22                              <1> 
    23 00000223 8B5E0C              <1>         mov bx, word[bp + 12]                   ; flags = オプション
    24                              <1> 
    25                              <1>         ; 符号付き判定
    26 00000226 F7C30100            <1>         test bx, 0b0001
    27                              <1> .10Q:
    28 0000022A 7408                <1>         je .10E
    29 0000022C 83F800              <1>         cmp ax, 0
    30                              <1> .12Q:
    31 0000022F 7D03                <1>         jge .12E
    32 00000231 83CB02              <1>         or bx, 0b0010
    33                              <1> .12E:
    34                              <1> .10E:
    35                              <1> 
    36                              <1>         ; 符号出力判定
    37 00000234 F7C30200            <1>         test bx, 0b0010
    38                              <1> .20Q:
    39 00000238 7410                <1>         je .20E
    40 0000023A 83F800              <1>         cmp ax, 0
    41                              <1> .22Q:
    42 0000023D 7D07                <1>         jge .22F
    43 0000023F F7D8                <1>         neg ax
    44 00000241 C6042D              <1>         mov [si], byte '-'
    45 00000244 EB03                <1>         jmp .22E
    46                              <1> .22F:
    47 00000246 C6042B              <1>         mov [si], byte '+'
    48                              <1> .22E:
    49 00000249 49                  <1>         dec cx
    50                              <1> .20E:
    51                              <1> 
    52                              <1>         ; ASCII変換
    53 0000024A 8B5E0A              <1>         mov bx, [bp + 10]
    54                              <1> .30L:
    55 0000024D BA0000              <1>         mov dx, 0
    56 00000250 F7F3                <1>         div bx
    57                              <1> 
    58 00000252 89D6                <1>         mov si, dx
    59 00000254 8A94[7C02]          <1>         mov dl, byte[.ascii + si]
    60                              <1> 
    61 00000258 8815                <1>         mov [di], dl
    62 0000025A 4F                  <1>         dec di
    63                              <1> 
    64 0000025B 83F800              <1>         cmp ax, 0
    65 0000025E E0ED                <1>         loopnz .30L
    66                              <1> .30E:
    67                              <1> 
    68                              <1>         ; 空欄を埋める
    69 00000260 83F900              <1>         cmp cx, 0
    70                              <1> .40Q:
    71 00000263 740D                <1>         je .40E
    72 00000265 B020                <1>         mov al, ' '
    73 00000267 837E0C04            <1>         cmp [bp + 12], word 0b0100
    74                              <1> .42Q:
    75 0000026B 7502                <1>         jne .42E
    76 0000026D B030                <1>         mov al, '0'
    77                              <1> .42E:
    78 0000026F FD                  <1>         std
    79 00000270 F3AA                <1>         rep stosb
    80                              <1> .40E:
    81                              <1> 
    82                              <1>         ; レジスタの復帰
    83 00000272 5F                  <1>         pop di
    84 00000273 5E                  <1>         pop si
    85 00000274 5A                  <1>         pop dx
    86 00000275 59                  <1>         pop cx
    87 00000276 5B                  <1>         pop bx
    88 00000277 58                  <1>         pop ax
    89                              <1> 
    90                              <1>         ; 【スタックフレームの破棄】
    91 00000278 89EC                <1>         mov sp, bp
    92 0000027A 5D                  <1>         pop bp
    93                              <1> 
    94 0000027B C3                  <1>         ret
    95                              <1> 
    96 0000027C 303132333435363738- <1> .ascii db "0123456789ABCDEF"
    96 00000285 39414243444546      <1>
   106                                  %include "../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                 ;    + 4 | パラメータバッファ
     4                              <1>                 ;    + 2 | IP(戻り番地)
     5 0000028C 55                  <1>     push bp     ; BP + 0 | BP(元の値)
     6 0000028D 89E5                <1>     mov bp, sp  ; -------+----------------
     7                              <1> 
     8                              <1>     ; レジスタの保存
     9 0000028F 53                  <1>     push bx
    10 00000290 51                  <1>     push cx
    11 00000291 06                  <1>     push es
    12 00000292 56                  <1>     push si
    13 00000293 57                  <1>     push di
    14                              <1> 
    15                              <1>     ; 処理の開始
    16 00000294 8B7604              <1>     mov si, [bp + 4]            ; SI = バッファ
    17                              <1> 
    18 00000297 B80000              <1>     mov ax, 0                   ; Disk Base Table Pointerの初期化
    19 0000029A 8EC0                <1>     mov es, ax                  ; ES = 0;
    20 0000029C 89C7                <1>     mov di, ax                  ; DI = 0;
    21                              <1> 
    22 0000029E B408                <1>     mov ah, 8                   ; // get drive parameters
    23 000002A0 8B3C                <1>     mov di, [si + drive.no]     ; DL = ドライブ番号
    24 000002A2 CD13                <1>     int 0x13                    ; CF = BIOS(0x13, 8);
    25 000002A4 721B                <1> .10Q: jc .10F                   ; if (0 == CF)
    26                              <1> .10T:                           ; {
    27 000002A6 88C8                <1>     mov al, cl                  ;   AX = セクタ数
    28 000002A8 83E03F              <1>     and ax, 0x3F                ;   // 下位6ビットのみ有効
    29                              <1> 
    30 000002AB C0E906              <1>     shr cl, 6                   ;   CX = シリンダ数
    31 000002AE C1C908              <1>     ror cx, 8                   ;
    32 000002B1 41                  <1>     inc cx                      ;
    33                              <1> 
    34 000002B2 0FB6DE              <1>     movzx bx, dh                ;   BX = ヘッド数(1ベース)
    35 000002B5 43                  <1>     inc bx                      ;
    36                              <1> 
    37 000002B6 894C02              <1>     mov [si + drive.cyln], cx   ;   drive.syln = CX; // C:シリンダ数
    38 000002B9 895C04              <1>     mov [si + drive.head], bx   ;   drive.head = BX; // H:ヘッド数
    39 000002BC 894406              <1>     mov [si + drive.sect], ax   ;   drive.sect = AX; // S:セクト数
    40                              <1> 
    41 000002BF EB03                <1>     jmp .10E                    ; }
    42                              <1> .10F:                           ; else
    43                              <1>                                 ; {
    44 000002C1 B80000              <1>     mov ax, 0                   ;   AX = 0; // 失敗
    45                              <1> .10E:                           ; }
    46                              <1> 
    47                              <1>     ; レジスタの復帰
    48 000002C4 5F                  <1>     pop di
    49 000002C5 5E                  <1>     pop si
    50 000002C6 07                  <1>     pop es
    51 000002C7 59                  <1>     pop cx
    52 000002C8 5B                  <1>     pop bx
    53                              <1> 
    54                              <1>     ; スタックフレームの破棄
    55 000002C9 89EC                <1>     mov sp, bp
    56 000002CB 5D                  <1>     pop bp
    57                              <1> 
    58 000002CC C3                  <1>     ret
   107                                  %include "../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:
     2                              <1>     ; スタックフレームの構築
     3                              <1>                         ; -------+---------------------
     4                              <1>                         ;    + 4 | フォントアドレス格納位置
     5                              <1>                         ;    + 2 | IP
     6 000002CD 55                  <1>     push bp             ; BP + 0 | BP
     7 000002CE 89E5                <1>     mov bp, sp          ; -------+---------------------
     8                              <1> 
     9                              <1>     ; レジスタの保存
    10 000002D0 50                  <1>     push ax
    11 000002D1 53                  <1>     push bx
    12 000002D2 56                  <1>     push si
    13 000002D3 06                  <1>     push es
    14 000002D4 55                  <1>     push bp
    15                              <1> 
    16                              <1>     ; 引数を取得
    17 000002D5 8B7604              <1>     mov si, [bp + 4]    ; dst = FONTアドレスの保存先;
    18                              <1> 
    19                              <1>     ; フォントアドレスの取得
    20 000002D8 B83011              <1>     mov ax, 0x1130      ; //フォントアドレスの取得
    21 000002DB B706                <1>     mov bh, 0x06        ; 8x16 font(vga/mcga)
    22 000002DD CD10                <1>     int 10h             ; ES:BP=FONT ADDRESS
    23                              <1> 
    24                              <1>     ; FONTアドレスを保存
    25 000002DF 8C04                <1>     mov [si + 0], es    ; dst[0] = セグメンt;
    26 000002E1 896C02              <1>     mov [si + 2], bp    ; dst[1] = オフセット;
    27                              <1> 
    28                              <1>     ; レジスタの復帰
    29 000002E4 5D                  <1>     pop bp
    30 000002E5 07                  <1>     pop es
    31 000002E6 5E                  <1>     pop si
    32 000002E7 5B                  <1>     pop bx
    33 000002E8 58                  <1>     pop ax
    34                              <1> 
    35                              <1>     ; スタックフレームの破棄
    36 000002E9 89EC                <1>     mov sp, bp
    37 000002EB 5D                  <1>     pop bp
    38                              <1> 
    39 000002EC C3                  <1>     ret
   108                                  %include "../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1>         ;-----------------------------------------
     3                              <1>         ; 【レジスタの保存】
     4                              <1>         ;-----------------------------------------
     5 000002ED 6650                <1>         push eax
     6 000002EF 6653                <1>         push ebx
     7 000002F1 6651                <1>         push ecx
     8 000002F3 6652                <1>         push edx
     9 000002F5 56                  <1>         push si
    10 000002F6 57                  <1>         push di
    11 000002F7 55                  <1>         push bp
    12                              <1> 
    13                              <1> ALIGN 4, db 0
    14 000002F8 00<rept>            <1> .b0:    times E820_RECORD_SIZE db 0
    15                              <1> 
    16 0000030C 68[A003]E8AEFD83C4- <1>         cdecl puts, .s0
    16 00000314 02                  <1>
    17                              <1> 
    18                              <1>         ; メモリ情報を取得する
    19 00000315 BD0000              <1>         mov bp, 0
    20 00000318 66BB00000000        <1>         mov ebx, 0
    21                              <1> .10L:
    22 0000031E 66B820E80000        <1>         mov eax, 0x0000E820
    23 00000324 66B914000000        <1>         mov ecx, E820_RECORD_SIZE
    24 0000032A 66BA50414D53        <1>         mov edx, 'PAMS'
    25 00000330 BF[F802]            <1>         mov di, .b0
    26 00000333 CD15                <1>         int 0x15
    27                              <1> 
    28                              <1>         ; コマンドに対応か？
    29 00000335 663D50414D53        <1>         cmp eax, 'PAMS'
    30 0000033B 7402                <1>         je .12E
    31 0000033D EB4C                <1>         jmp .10E
    32                              <1> .12E:
    33                              <1>         ; エラーなし？
    34 0000033F 7302                <1>         jnc .14E
    35 00000341 EB48                <1>         jmp .10E
    36                              <1> .14E:
    37                              <1>         ; 1レコード分のメモリ情報を表示
    38 00000343 57E8E40083C402      <1>         cdecl put_mem_info, di
    39                              <1> 
    40                              <1>         ; ACPI dataのアドレスを取得
    41 0000034A 668B4510            <1>         mov eax, [di + 16]
    42 0000034E 6683F803            <1>         cmp eax, 3
    43 00000352 750F                <1>         jne .15E
    44                              <1> 
    45 00000354 668B05              <1>         mov eax, [di + 0]
    46 00000357 66A3[0402]          <1>         mov [ACPI_DATA.adr], eax
    47                              <1> 
    48 0000035B 668B4508            <1>         mov eax, [di + 8]
    49 0000035F 66A3[0802]          <1>         mov [ACPI_DATA.len], eax
    50                              <1> .15E:
    51 00000363 6683FB00            <1>         cmp ebx, 0
    52 00000367 741C                <1>         jz .16E
    53                              <1> 
    54 00000369 45                  <1>         inc bp
    55 0000036A 83E507              <1>         and bp, 0x07
    56 0000036D 7516                <1>         jnz .16E
    57                              <1> 
    58 0000036F 68[1304]E84BFD83C4- <1>         cdecl puts, .s2
    58 00000377 02                  <1>
    59                              <1> 
    60 00000378 B410                <1>         mov ah, 0x10
    61 0000037A CD16                <1>         int 0x16
    62                              <1> 
    63 0000037C 68[1E04]E83EFD83C4- <1>         cdecl puts, .s3
    63 00000384 02                  <1>
    64                              <1> .16E:
    65 00000385 6683FB00            <1>         cmp ebx, 0
    66 00000389 7593                <1>         jne .10L
    67                              <1> .10E:
    68 0000038B 68[E303]E82FFD83C4- <1>         cdecl puts, .s1
    68 00000393 02                  <1>
    69                              <1> 
    70                              <1>         ;-----------------------------------------
    71                              <1>         ; 【レジスタの復帰】
    72                              <1>         ;-----------------------------------------
    73 00000394 5D                  <1>         pop bp
    74 00000395 5F                  <1>         pop di
    75 00000396 5E                  <1>         pop si
    76 00000397 665A                <1>         pop edx
    77 00000399 6659                <1>         pop ecx
    78 0000039B 665B                <1>         pop ebx
    79 0000039D 6658                <1>         pop eax
    80                              <1> 
    81 0000039F C3                  <1>         ret
    82                              <1> 
    83                              <1>         ;------------------------------------------
    84                              <1>         ; データ
    85                              <1>         ;------------------------------------------
    86 000003A0 2045383230204D656D- <1> .s0:	db " E820 Memory Map:", 0x0A, 0x0D
    86 000003A9 6F7279204D61703A0A- <1>
    86 000003B2 0D                  <1>
    87 000003B3 20426173655F5F5F5F- <1> 	db " Base_____________ Length___________ Type____", 0x0A, 0x0D, 0
    87 000003BC 5F5F5F5F5F5F5F5F5F- <1>
    87 000003C5 204C656E6774685F5F- <1>
    87 000003CE 5F5F5F5F5F5F5F5F5F- <1>
    87 000003D7 20547970655F5F5F5F- <1>
    87 000003E0 0A0D00              <1>
    88 000003E3 202D2D2D2D2D2D2D2D- <1> .s1:	db " ----------------- ----------------- --------", 0x0A, 0x0D, 0
    88 000003EC 2D2D2D2D2D2D2D2D2D- <1>
    88 000003F5 202D2D2D2D2D2D2D2D- <1>
    88 000003FE 2D2D2D2D2D2D2D2D2D- <1>
    88 00000407 202D2D2D2D2D2D2D2D- <1>
    88 00000410 0A0D00              <1>
    89 00000413 203C6D6F72652E2E2E- <1> .s2:    db " <more...>", 0
    89 0000041C 3E00                <1>
    90 0000041E 0D2020202020202020- <1> .s3:    db 0x0D, "          ", 0x0D, 0
    90 00000427 20200D00            <1>
    91                              <1> 
    92                              <1> put_mem_info:
    93                              <1>         ;------------------------------------------
    94                              <1>         ; 【スタックフレームの構築】
    95                              <1>         ;------------------------------------------
    96 0000042B 55                  <1>         push bp
    97 0000042C 89E5                <1>         mov bp, sp
    98                              <1> 
    99                              <1>         ;-----------------------------------------
   100                              <1>         ; 【レジスタの保存】
   101                              <1>         ;-----------------------------------------
   102 0000042E 53                  <1>         push bx
   103 0000042F 56                  <1>         push si
   104                              <1> 
   105                              <1>         ;-----------------------------------------
   106                              <1>         ; 引数を取得
   107                              <1>         ;-----------------------------------------
   108 00000430 8B7604              <1>         mov si, [bp + 4]
   109                              <1> 
   110                              <1>         ;-----------------------------------------
   111                              <1>         ; レコードの表示
   112                              <1>         ;-----------------------------------------
   113                              <1>         ; Base(64bit)
   114 00000433 6A046A106A0468-     <1>         cdecl itoa, word[si + 6], .p2 + 0, 4, 16, 0b0100
   114 0000043A [0A05]FF7406E8CAFD- <1>
   114 00000442 83C40A              <1>
   115 00000445 6A046A106A0468-     <1>         cdecl itoa, word[si + 4], .p2 + 4, 4, 16, 0b0100
   115 0000044C [0E05]FF7404E8B8FD- <1>
   115 00000454 83C40A              <1>
   116 00000457 6A046A106A0468-     <1>         cdecl itoa, word[si + 2], .p3 + 0, 4, 16, 0b0100
   116 0000045E [1305]FF7402E8A6FD- <1>
   116 00000466 83C40A              <1>
   117 00000469 6A046A106A0468-     <1>         cdecl itoa, word[si + 0], .p3 + 4, 4, 16, 0b0100
   117 00000470 [1705]FF34E895FD83- <1>
   117 00000478 C40A                <1>
   118                              <1> 
   119                              <1>         ; Length(64bit)
   120 0000047A 6A046A106A0468-     <1>         cdecl itoa, word[si + 14], .p4 + 0, 4, 16, 0b0100
   120 00000481 [1C05]FF740EE883FD- <1>
   120 00000489 83C40A              <1>
   121 0000048C 6A046A106A0468-     <1>         cdecl itoa, word[si + 12], .p4 + 4, 4, 16, 0b0100
   121 00000493 [2005]FF740CE871FD- <1>
   121 0000049B 83C40A              <1>
   122 0000049E 6A046A106A0468-     <1>         cdecl itoa, word[si + 10], .p5 + 0, 4, 16, 0b0100
   122 000004A5 [2505]FF740AE85FFD- <1>
   122 000004AD 83C40A              <1>
   123 000004B0 6A046A106A0468-     <1>         cdecl itoa, word[si + 8], .p5 + 4, 4, 16, 0b0100
   123 000004B7 [2905]FF7408E84DFD- <1>
   123 000004BF 83C40A              <1>
   124                              <1> 
   125                              <1>         ; Type(32bit)
   126 000004C2 6A046A106A0468-     <1>         cdecl itoa, word[si + 18], .p6 + 0, 4, 16, 0b0100
   126 000004C9 [2E05]FF7412E83BFD- <1>
   126 000004D1 83C40A              <1>
   127 000004D4 6A046A106A0468-     <1>         cdecl itoa, word[si + 16], .p6 + 4, 4, 16, 0b0100
   127 000004DB [3205]FF7410E829FD- <1>
   127 000004E3 83C40A              <1>
   128                              <1> 
   129 000004E6 68[0905]E8D4FB83C4- <1>         cdecl puts, .s1
   129 000004EE 02                  <1>
   130                              <1> 
   131 000004EF 8B5C10              <1>         mov bx, [si + 16]
   132 000004F2 83E307              <1>         and bx, 0x07
   133 000004F5 D1E3                <1>         shl bx, 1
   134 000004F7 81C3[8B05]          <1>         add bx, .t0
   135 000004FB FF37E8C0FB83C402    <1>         cdecl puts, word[bx]
   136                              <1> 
   137                              <1>         ;-----------------------------------------
   138                              <1>         ; 【レジスタの復帰】
   139                              <1>         ;-----------------------------------------
   140 00000503 5E                  <1>         pop si
   141 00000504 5B                  <1>         pop bx
   142                              <1> 
   143                              <1>         ;-----------------------------------------
   144                              <1>         ; 【スタックフレームの破棄】
   145                              <1>         ;-----------------------------------------
   146 00000505 89EC                <1>         mov sp, bp
   147 00000507 5D                  <1>         pop bp
   148                              <1> 
   149 00000508 C3                  <1>         ret
   150                              <1> 
   151                              <1>         ;------------------------------------------
   152                              <1>         ; データ
   153                              <1>         ;------------------------------------------
   154 00000509 20                  <1> .s1:    db " "
   155 0000050A 5A5A5A5A5A5A5A5A5F  <1> .p2:    db "ZZZZZZZZ_"
   156 00000513 5A5A5A5A5A5A5A5A20  <1> .p3:    db "ZZZZZZZZ "
   157 0000051C 5A5A5A5A5A5A5A5A5F  <1> .p4:    db "ZZZZZZZZ_"
   158 00000525 5A5A5A5A5A5A5A5A20  <1> .p5:    db "ZZZZZZZZ "
   159 0000052E 5A5A5A5A5A5A5A5A00  <1> .p6:    db "ZZZZZZZZ", 0
   160                              <1> 
   161 00000537 2028556E6B6E6F776E- <1> .s4:    db " (Unknown)", 0x0A, 0x0D, 0
   161 00000540 290A0D00            <1>
   162 00000544 2028757361626C6529- <1> .s5:    db " (usable)", 0x0A, 0x0D, 0
   162 0000054D 0A0D00              <1>
   163 00000550 202872657365727665- <1> .s6:    db " (reserved)", 0x0A, 0x0D, 0
   163 00000559 64290A0D00          <1>
   164 0000055E 202841435049206461- <1> .s7:    db " (ACPI data)", 0x0A, 0x0D, 0
   164 00000567 7461290A0D00        <1>
   165 0000056D 202841435049204E56- <1> .s8:    db " (ACPI NVS)", 0x0A, 0x0D, 0
   165 00000576 53290A0D00          <1>
   166 0000057B 2028626164206D656D- <1> .s9:    db " (bad memory)", 0x0A, 0x0D, 0
   166 00000584 6F7279290A0D00      <1>
   167                              <1> 
   168 0000058B [3705][4405][5005]- <1> .t0: dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   168 00000591 [5E05][6D05][7B05]- <1>
   168 00000597 [3705][3705]        <1>
   109                                  %include "../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2                              <1>     ;----------------------------
     3                              <1>     ; スタックフレームの構築
     4                              <1>     ;----------------------------
     5                              <1>                                     ;    + 4 | データ
     6                              <1>                                     ;    + 2 | IP(戻り値)
     7 0000059B 55                  <1>     push bp                         ; BP + 0 | BP(元の値)
     8 0000059C 89E5                <1>     mov bp, sp                      ;--------+-----------
     9                              <1> 
    10                              <1>     ;----------------------------
    11                              <1>     ; レジスタの保存
    12                              <1>     ;----------------------------
    13 0000059E 51                  <1>     push cx
    14                              <1> 
    15                              <1> 
    16 0000059F B90000              <1>     mov cx, 0                       ; cx = 0; // 最大カウント値
    17                              <1> .10L:                               ; do 
    18                              <1>                                     ; {
    19 000005A2 E464                <1>     in al, 0x64                     ;   AL = inp(0x64); // KBCステータス
    20 000005A4 A802                <1>     test al, 0x02                   ;   ZF = AL & 0x02; // 書き込み可能?
    21 000005A6 E0FA                <1>     loopnz .10L                     ; } while (--CX && !ZF);
    22                              <1> 
    23 000005A8 83F900              <1>     cmp cx, 0                       ; if (CX) // 未タイムアウト
    24 000005AB 7405                <1>     jz .20E                         ; {
    25                              <1> 
    26 000005AD 8A4604              <1>     mov al, [bp + 4]                ;   AL = データ;
    27 000005B0 E660                <1>     out 0x60, al                    ;   outp(0x60, AL);
    28                              <1> .20E:                               ; }
    29                              <1> 
    30 000005B2 89C8                <1>     mov ax, cx
    31                              <1> 
    32                              <1>     ;----------------------------
    33                              <1>     ; レジスタの復帰
    34                              <1>     ;----------------------------   
    35 000005B4 59                  <1>     pop cx
    36                              <1> 
    37                              <1>     ;----------------------------
    38                              <1>     ; ステックフレームの破棄
    39                              <1>     ;----------------------------
    40 000005B5 89EC                <1>     mov sp, bp
    41 000005B7 5D                  <1>     pop bp
    42                              <1> 
    43 000005B8 C3                  <1>     ret
    44                              <1> 
    45                              <1> KBC_Data_Read:
    46                              <1>     ;----------------------------
    47                              <1>     ; スタックフレームの構築
    48                              <1>     ;----------------------------
    49                              <1>                                     ;    + 4 | データ
    50                              <1>                                     ;    + 2 | IP(戻り値)
    51 000005B9 55                  <1>     push bp                         ; BP + 0 | BP(元の値)
    52 000005BA 89E5                <1>     mov bp, sp                      ;--------+-----------
    53                              <1> 
    54                              <1>     ;----------------------------
    55                              <1>     ; レジスタの保存
    56                              <1>     ;----------------------------
    57 000005BC 51                  <1>     push cx
    58                              <1> 
    59 000005BD B90000              <1>     mov cx, 0                       ; cx = 0; // 最大カウント値
    60                              <1> .10L:                               ; do
    61                              <1>                                     ; {
    62 000005C0 E464                <1>     in al, 0x64                     ;   AL = inp(0x64); // KBCステータス
    63 000005C2 A801                <1>     test al, 0x01                   ;   ZF = AL & 0x01; // 読み込み可能?
    64 000005C4 E1FA                <1>     loopz .10L                     ; } while (--CX && !ZF);
    65                              <1> 
    66 000005C6 83F900              <1>     cmp cx, 0                       ; if (CX) // 未タイムアウト
    67 000005C9 7409                <1>     jz .20E                         ; {
    68                              <1>                                     ;
    69 000005CB B400                <1>     mov ah, 0x00                    ;   AH = 0x00;
    70 000005CD E460                <1>     in al, 0x60                     ;   AL = inp(0x60); // データ取得
    71                              <1> 
    72 000005CF 8B7E04              <1>     mov di, [bp + 4]                ;   DI = ptr;
    73 000005D2 8905                <1>     mov [di + 0], ax                ;   DI[0] = AX;
    74                              <1> .20E:                               ; }
    75                              <1> 
    76 000005D4 89C8                <1>     mov ax, cx                      ; return CX;
    77                              <1> 
    78                              <1>     ;----------------------------
    79                              <1>     ; レジスタの復帰
    80                              <1>     ;----------------------------   
    81 000005D6 59                  <1>     pop cx
    82                              <1> 
    83                              <1>     ;----------------------------
    84                              <1>     ; ステックフレームの破棄
    85                              <1>     ;----------------------------
    86 000005D7 89EC                <1>     mov sp, bp
    87 000005D9 5D                  <1>     pop bp
    88                              <1> 
    89 000005DA C3                  <1>     ret
    90                              <1> 
    91                              <1> KBC_Cmd_Write:
    92                              <1>     ;----------------------------
    93                              <1>     ; スタックフレームの構築
    94                              <1>     ;----------------------------
    95                              <1>                                     ;    + 4 | データ
    96                              <1>                                     ;    + 2 | IP(戻り値)
    97 000005DB 55                  <1>     push bp                         ; BP + 0 | BP(元の値)
    98 000005DC 89E5                <1>     mov bp, sp                      ;--------+-----------
    99                              <1> 
   100                              <1>     ;----------------------------
   101                              <1>     ; レジスタの保存
   102                              <1>     ;----------------------------
   103 000005DE 51                  <1>     push cx
   104                              <1> 
   105 000005DF B90000              <1>     mov cx, 0                       ; cx = 0; // 最大カウント値
   106                              <1> .10L:                               ; do
   107                              <1>                                     ; {
   108 000005E2 E464                <1>     in al, 0x64                     ;   AL = inp(0x64); // KBCステータス
   109 000005E4 A802                <1>     test al, 0x02                   ;   ZF = AL & 0x01; // 読み込み可能?
   110 000005E6 E0FA                <1>     loopnz .10L                     ; } while (--CX && !ZF);
   111                              <1> 
   112 000005E8 83F900              <1>     cmp cx, 0                       ; if (CX) // 未タイムアウト
   113 000005EB 7405                <1>     jz .20E                         ; {
   114                              <1>                                     ;
   115 000005ED 8A4604              <1>     mov al, [bp + 4]                ;   AL = コマンド
   116 000005F0 E664                <1>     out 0x64, al                    ;   outp(0x64, AL);
   117                              <1> .20E:                               ; }
   118                              <1> 
   119 000005F2 89C8                <1>     mov ax, cx
   120                              <1> 
   121                              <1>     ;----------------------------
   122                              <1>     ; レジスタの復帰
   123                              <1>     ;----------------------------   
   124 000005F4 59                  <1>     pop cx
   125                              <1> 
   126                              <1>     ;----------------------------
   127                              <1>     ; ステックフレームの破棄
   128                              <1>     ;----------------------------
   129 000005F5 89EC                <1>     mov sp, bp
   130 000005F7 5D                  <1>     pop bp
   131                              <1> 
   132 000005F8 C3                  <1>     ret
   110                                  %include "../modules/real/read_lba.s"
     1                              <1> lba_chs:
     2                              <1>         ;-----------------------------------------
     3                              <1>         ; 【スタックフレームの構築】
     4                              <1>         ;-----------------------------------------
     5 000005F9 55                  <1>         push bp
     6 000005FA 89E5                <1>         mov bp, sp
     7                              <1> 
     8                              <1>         ;-----------------------------------------
     9                              <1>         ; 【レジスタの保存】
    10                              <1>         ;-----------------------------------------
    11 000005FC 50                  <1>         push ax
    12 000005FD 53                  <1>         push bx
    13 000005FE 52                  <1>         push dx
    14 000005FF 56                  <1>         push si
    15 00000600 57                  <1>         push di
    16                              <1> 
    17                              <1>         ;-----------------------------------------
    18                              <1>         ; セクタ数の計算
    19                              <1>         ;-----------------------------------------
    20 00000601 8B7604              <1>         mov si, [bp + 4]
    21 00000604 8B7E06              <1>         mov di, [bp + 6]
    22                              <1> 
    23 00000607 8A4404              <1>         mov al, [si + drive.head]                   ; AL = 最大ヘッド数;
    24 0000060A F66406              <1>         mul byte [si + drive.sect]                  ; AX = 最大ヘッド数 * 最大セクタ数;
    25 0000060D 89C3                <1>         mov bx, ax                                  ; BX = シリンダあたりのセクタ数;
    26                              <1> 
    27 0000060F BA0000              <1>         mov dx, 0                                   ; DX = LBA(上位2バイト)
    28 00000612 8B4608              <1>         mov ax, [bp + 8]                            ; AX = LBA(下位2バイト)
    29 00000615 F7F3                <1>         div bx                                      ; DX = DX:AX % BX; // 残り
    30                              <1>                                                     ; AX = DX:AX / BX; // シリンダ番号
    31                              <1> 
    32 00000617 894502              <1>         mov [di + drive.cyln], ax                   ; drv_chs.cyln = シリンダ番号;
    33                              <1> 
    34 0000061A 89D0                <1>         mov ax, dx                                  ; AX = 残り　
    35 0000061C F67406              <1>         div byte [si + drive.sect]                  ; AH = AX % 最大セクタ数; // セクタ番号
    36                              <1>                                                     ; AL = AX / 最大セクタ数; // ヘッド番号
    37                              <1> 
    38 0000061F 0FB6D4              <1>         movzx dx, ah                                ; DX = セクタ番号
    39 00000622 42                  <1>         inc dx                                      ; (セクタは1始まりなので+1)
    40                              <1> 
    41 00000623 B400                <1>         mov ah,  0x00                               ; AX = ヘッド位置
    42                              <1> 
    43 00000625 894504              <1>         mov [di + drive.head], ax                   ; drv_chs.head = ヘッド番号;
    44 00000628 895506              <1>         mov [di + drive.sect], dx                   ; drv_chs.sect = セクタ番号;
    45                              <1> 
    46                              <1>         ;-----------------------------------------
    47                              <1>         ; 【レジスタの復帰】
    48                              <1>         ;-----------------------------------------
    49 0000062B 5F                  <1>         pop di
    50 0000062C 5E                  <1>         pop si
    51 0000062D 5A                  <1>         pop dx
    52 0000062E 5B                  <1>         pop bx
    53 0000062F 58                  <1>         pop ax
    54                              <1> 
    55                              <1>         ;-----------------------------------------
    56                              <1>         ; 【スタックフレームの破棄】
    57                              <1>         ;-----------------------------------------
    58 00000630 89EC                <1>         mov sp, bp
    59 00000632 5D                  <1>         pop bp
    60                              <1> 
    61 00000633 C3                  <1>         ret
    62                              <1> 
    63                              <1> read_lba:
    64                              <1>         ;-----------------------------------------
    65                              <1>         ; 【スタックフレームの構築】
    66                              <1>         ;-----------------------------------------
    67 00000634 55                  <1>         push bp
    68 00000635 89E5                <1>         mov bp, sp
    69                              <1> 
    70                              <1>         ;-----------------------------------------
    71                              <1>         ; 【レジスタの保存】
    72                              <1>         ;-----------------------------------------
    73 00000637 56                  <1>         push si
    74                              <1> 
    75                              <1>         ;-----------------------------------------
    76                              <1>         ; 【前処理】
    77                              <1>         ;-----------------------------------------
    78 00000638 8B7604              <1>         mov si, [bp + 4]
    79                              <1> 
    80                              <1>         ;-----------------------------------------
    81                              <1>         ; LBA -> CHS変換
    82                              <1>         ;-----------------------------------------
    83 0000063B 8B4606              <1>         mov ax, [bp + 6]                            ; AX = LBA;
    84 0000063E 5068[6206]56E8B3FF- <1>         cdecl lba_chs, si, .chs, ax                 ; lba_chs(drive, .chs, AX);
    84 00000646 83C406              <1>
    85                              <1> 
    86                              <1>         ;-----------------------------------------
    87                              <1>         ; ドライブ番号のコピー
    88                              <1>         ;-----------------------------------------
    89 00000649 8A04                <1>         mov al, [si + drive.no]
    90 0000064B A2[6206]            <1>         mov [.chs + drive.no], al                   ; ドライブ番号
    91                              <1> 
    92                              <1>         ;-----------------------------------------
    93                              <1>         ; セクタの読み込み
    94                              <1>         ;-----------------------------------------
    95 0000064E FF760AFF760868-     <1>         cdecl read_chs, .chs, word [bp + 8], word [bp + 10] ; AX = read_chs(.chs, セクタ数, ofs);
    95 00000655 [6206]E8C4FA83C406  <1>
    96                              <1> 
    97                              <1>         ;-----------------------------------------
    98                              <1>         ; 【レジスタの復帰】
    99                              <1>         ;-----------------------------------------
   100 0000065D 5E                  <1>         pop si
   101                              <1> 
   102                              <1>         ;-----------------------------------------
   103                              <1>         ; 【スタックフレームの破棄】
   104                              <1>         ;-----------------------------------------
   105 0000065E 89EC                <1>         mov sp, bp
   106 00000660 5D                  <1>         pop bp
   107                              <1> 
   108 00000661 C3                  <1>         ret
   109                              <1> 
   110                              <1> ALIGN 2
   111 00000662 00<rept>            <1> .chs:   times drive_size db 0
   112                              <1> 
   111                                  
   112                                  ;***********************************************************
   113                                  ;  ブート処理の第2ステージ
   114                                  ;***********************************************************
   115                                  stage_2:
   116                                          ;------------------------------------------
   117                                          ; 文字列を表示
   118                                          ;------------------------------------------
   119 0000066A 68[E406]E850FA83C4-             cdecl puts, .s0
   119 00000672 02                 
   120                                  
   121                                          ;------------------------------------------
   122                                          ; ドライブ情報を取得
   123                                          ;------------------------------------------
   124 00000673 68[B800]E813FC83C4-             cdecl get_drive_param, BOOT
   124 0000067B 02                 
   125 0000067C 83F800                          cmp ax, 0
   126                                  .10Q:
   127 0000067F 750C                            jne .10E
   128                                  .10T:
   129 00000681 68[1B07]E839FA83C4-             cdecl puts, .e0
   129 00000689 02                 
   130 0000068A E852FA                          call reboot
   131                                  .10E:
   132                                  
   133                                          ;------------------------------------------
   134                                          ; ドライブ情報を取得
   135                                          ;------------------------------------------
   136 0000068D A1[B800]                        mov ax, [BOOT + drive.no]
   137 00000690 6A046A106A0268-                 cdecl itoa, ax, .p1, 2, 16, 0b0100
   137 00000697 [FC06]50E86FFB83C4-
   137 0000069F 0A                 
   138 000006A0 A1[BA00]                        mov ax, [BOOT + drive.cyln]
   139 000006A3 6A046A106A0468-                 cdecl itoa, ax, .p2, 4, 16, 0b0100
   139 000006AA [0407]50E85CFB83C4-
   139 000006B2 0A                 
   140 000006B3 A1[BC00]                        mov ax, [BOOT + drive.head]
   141 000006B6 6A046A106A0268-                 cdecl itoa, ax, .p3, 2, 16, 0b0100
   141 000006BD [0E07]50E849FB83C4-
   141 000006C5 0A                 
   142 000006C6 A1[BE00]                        mov ax, [BOOT + drive.sect]
   143 000006C9 6A046A106A0268-                 cdecl itoa, ax, .p4, 2, 16, 0b0100
   143 000006D0 [1607]50E836FB83C4-
   143 000006D8 0A                 
   144 000006D9 68[F306]E8E1F983C4-             cdecl puts, .s1
   144 000006E1 02                 
   145                                  
   146                                          ;------------------------------------------
   147                                          ; 次のステージへ移行
   148                                          ;------------------------------------------
   149 000006E2 EB52                            jmp stage_3rd
   150                                  
   151                                          ;------------------------------------------
   152                                          ; データ
   153                                          ;------------------------------------------
   154 000006E4 326E64207374616765-     .s0     db "2nd stage...", 0x0A, 0x0D, 0
   154 000006ED 2E2E2E0A0D00       
   155 000006F3 2044726976653A3078      .s1     db " Drive:0x"
   156 000006FC 20202C20433A3078        .p1     db "  , C:0x"
   157 00000704 202020202C20483A30-     .p2     db "    , H:0x"
   157 0000070D 78                 
   158 0000070E 20202C20533A3078        .p3     db "  , S:0x"
   159 00000716 20200A0D00              .p4     db "  ", 0x0A, 0x0D, 0
   160 0000071B 43616E277420676574-     .e0     db "Can't get drive parameter.", 0
   160 00000724 206472697665207061-
   160 0000072D 72616D657465722E00 
   161                                  
   162                                  ;***********************************************************
   163                                  ;  ブート処理の第3ステージ
   164                                  ;***********************************************************
   165                                  stage_3rd:
   166                                          ;------------------------------------------
   167                                          ; 文字列を表示
   168                                          ;------------------------------------------
   169 00000736 68[B307]E884F983C4-             cdecl puts, .s0
   169 0000073E 02                 
   170                                  
   171                                          ;------------------------------------------
   172                                          ; プロテクトモードで使用するフォントは、
   173                                          ; BIOSに内蔵されたものを流用する
   174                                          ;------------------------------------------
   175 0000073F 68[0002]E888FB83C4-             cdecl get_font_adr, FONT
   175 00000747 02                 
   176                                  
   177                                          ;------------------------------------------
   178                                          ; フォントアドレスの表示
   179                                          ;------------------------------------------
   180 00000748 6A046A106A0468-                 cdecl itoa, word[FONT.seg], .p1, 4, 16, 0b0100
   180 0000074F [D007]FF36[0002]E8-
   180 00000756 B4FA83C40A         
   181 0000075B 6A046A106A0468-                 cdecl itoa, word[FONT.off], .p2, 4, 16, 0b0100
   181 00000762 [D507]FF36[0202]E8-
   181 00000769 A1FA83C40A         
   182 0000076E 68[C207]E84CF983C4-             cdecl puts, .s1
   182 00000776 02                 
   183                                  
   184                                          ;------------------------------------------
   185                                          ; メモリ情報の取得と表示
   186                                          ;------------------------------------------
   187 00000777 E873FB                          cdecl get_mem_info
   188                                  
   189 0000077A 66A1[0402]                      mov eax, [ACPI_DATA.adr]
   190 0000077E 6683F800                        cmp eax, 0
   191 00000782 742D                            je .10E
   192                                  
   193 00000784 6A046A106A0468-                 cdecl itoa, ax, .p4, 4, 16, 0b0100
   193 0000078B [EE07]50E87BFA83C4-
   193 00000793 0A                 
   194 00000794 66C1E810                        shr eax, 16
   195 00000798 6A046A106A0468-                 cdecl itoa, ax, .p3, 4, 16, 0b0100
   195 0000079F [EA07]50E867FA83C4-
   195 000007A7 0A                 
   196 000007A8 68[DF07]E812F983C4-             cdecl puts, .s2
   196 000007B0 02                 
   197                                  .10E:
   198                                  
   199                                          ;------------------------------------------
   200                                          ; 次のステージへ移行
   201                                          ;------------------------------------------
   202 000007B1 EB42                            jmp stage_4
   203                                  
   204                                          ;------------------------------------------
   205                                          ; データ
   206                                          ;------------------------------------------
   207 000007B3 337264207374616765-     .s0     db "3rd stage...", 0x0A, 0x0D, 0
   207 000007BC 2E2E2E0A0D00       
   208 000007C2 20466F6E7420416464-     .s1     db " Font Address="
   208 000007CB 726573733D         
   209 000007D0 5A5A5A5A3A              .p1     db "ZZZZ:"
   210 000007D5 5A5A5A5A0A0D00          .p2     db "ZZZZ", 0x0A, 0x0D, 0
   211 000007DC 0A0D00                          db 0x0A, 0x0D, 0
   212 000007DF 204143504920646174-     .s2     db " ACPI data="
   212 000007E8 613D               
   213 000007EA 5A5A5A5A                .p3     db "ZZZZ"
   214 000007EE 5A5A5A5A0A0D00          .p4     db "ZZZZ", 0x0A, 0x0D, 0
   215                                  
   216                                  ;***********************************************************
   217                                  ;  ブート処理の第4ステージ
   218                                  ;***********************************************************
   219                                  stage_4:
   220                                          ;------------------------------------------
   221                                          ; 文字列を表示
   222                                          ;------------------------------------------
   223 000007F5 68[C908]E8C5F883C4-             cdecl puts, .s0
   223 000007FD 02                 
   224                                  
   225                                  
   226                                          ;------------------------------------------
   227                                          ; A20ゲートの有効化
   228                                          ;------------------------------------------
   229 000007FE FA                              cli                                         ; // 割り込み禁止
   230                                  
   231 000007FF 68AD00E8D6FD83C402              cdecl KBC_Cmd_Write, 0xAD                   ; // キーボード無効化
   232                                  
   233 00000808 68D000E8CDFD83C402              cdecl KBC_Cmd_Write, 0xD0                   ; // 出力ポート読み出しコマンド
   234 00000811 68[1009]E8A2FD83C4-             cdecl KBC_Data_Read, .key                   ; // 出力ポートデータ
   234 00000819 02                 
   235                                  
   236 0000081A 8A1E[1009]                      mov bl, [.key]                              ; BL = key;
   237 0000081E 80CB02                          or bl, 0x02                                 ; BL |= 0x02; // A20ゲート有効化
   238                                  
   239 00000821 68D100E8B4FD83C402              cdecl KBC_Cmd_Write, 0xD1                   ; // 出力ポート書き込みコマンド
   240 0000082A 53E86DFD83C402                  cdecl KBC_Data_Write, bx                    ; // 出力ポートデータ
   241                                  
   242 00000831 68AE00E8A4FD83C402              cdecl KBC_Cmd_Write, 0xAE                   ; // キーボード有効化
   243                                  
   244 0000083A FB                              sti                                         ; // 割り込み許可
   245                                  
   246                                          ;------------------------------------------
   247                                          ; 文字列を表示
   248                                          ;------------------------------------------
   249 0000083B 68[D808]E87FF883C4-             cdecl puts, .s1
   249 00000843 02                 
   250                                  
   251                                          ;------------------------------------------
   252                                          ; キーボードLEDのテスト
   253                                          ;------------------------------------------
   254 00000844 68[ED08]E876F883C4-             cdecl puts, .s2
   254 0000084C 02                 
   255                                          
   256 0000084D BB0000                          mov bx, 0                                   ; CX = LEDの初期値;
   257                                  .10L:                                               ; do
   258                                                                                      ; {
   259 00000850 B400                            mov ah, 0x00                                ;   // キー入力待ち
   260 00000852 CD16                            int 0x16                                    ;   AL = BIOS(0x16, 0x00);
   261                                  
   262 00000854 3C31                            cmp al, '1'                                 ;   if (AL < '1')
   263 00000856 7266                            jb  .10E                                    ;       break;
   264                                  
   265 00000858 3C33                            cmp al, '3'                                 ;   if ('3' < AL)
   266 0000085A 7762                            ja .10E                                     ;       break;
   267                                  
   268 0000085C 88C1                            mov cl, al                                  ;   CL = キー入力;
   269 0000085E FEC9                            dec cl                                      ;   CL -= 1; // 1減算
   270                                  
   271 00000860 80E103                          and cl, 0x03                                ;   CL &= 0x03; // 0~2に制限
   272 00000863 B80100                          mov ax, 0x0001                              ;   AX = 0x0001; // ビット変換用
   273 00000866 D3E0                            shl ax, cl                                  ;   AX <<= CL; // 0~2ビット左シフト
   274 00000868 31C3                            xor bx, ax                                  ;   BX ^= AX; // ビット反転
   275                                  
   276                                          ;------------------------------------------
   277                                          ; LEDコマンドの送信
   278                                          ;------------------------------------------
   279 0000086A FA                              cli                                         ;   // 割り込み禁止
   280                                  
   281 0000086B 68AD00E86AFD83C402              cdecl KBC_Cmd_Write, 0xAD                   ;   // キーボード無効化
   282                                  
   283 00000874 68ED00E821FD83C402              cdecl KBC_Data_Write, 0xED                  ;   // LEDコマンド
   284 0000087D 68[1009]E836FD83C4-             cdecl KBC_Data_Read, .key                   ;   // 受信応答
   284 00000885 02                 
   285                                  
   286 00000886 803E[1009]FA                    cmp [.key], byte 0xFA                       ;   if (0xFA == key)
   287 0000088B 7509                            jne .11F                                    ;   {
   288                                          
   289 0000088D 53E80AFD83C402                  cdecl KBC_Data_Write, bx                    ;       // LEDデータ出力
   290                                                                                      ;   }
   291 00000894 EB1C                            jmp .11E                                    ;   else
   292                                  .11F:                                               ;   {
   293 00000896 6A046A106A0268-                 cdecl itoa, word [.key], .e1, 2, 16, 0b0100
   293 0000089D [0C09]FF36[1009]E8-
   293 000008A4 66F983C40A         
   294 000008A9 68[0B09]E811F883C4-             cdecl puts, .e0                             ;       // 受信コードを表示
   294 000008B1 02                 
   295                                  .11E:                                               ;   }
   296                                  
   297 000008B2 68AE00E823FD83C402              cdecl KBC_Cmd_Write, 0xAE                   ;   // キーボード有効化
   298                                  
   299 000008BB FB                              sti                                         ;   // 割り込み許可
   300                                  
   301 000008BC EB92                            jmp .10L                                    ; } while (1);
   302                                  .10E:
   303                                  
   304                                          ;------------------------------------------
   305                                          ; 文字列を表示
   306                                          ;------------------------------------------
   307 000008BE 68[0209]E8FCF783C4-             cdecl puts, .s3
   307 000008C6 02                 
   308                                  
   309                                          ;------------------------------------------
   310                                          ; 次のステージへ
   311                                          ;------------------------------------------
   312 000008C7 EB49                            jmp stage_5                                       ; while (1); // 無限ループ
   313                                  
   314 000008C9 347468207374616765-     .s0: db "4th stage...", 0x0A, 0x0D, 0
   314 000008D2 2E2E2E0A0D00       
   315 000008D8 204132302047617465-     .s1: db " A20 Gate Enabled.", 0x0A, 0x0D, 0
   315 000008E1 20456E61626C65642E-
   315 000008EA 0A0D00             
   316 000008ED 6B6579626F61726420-     .s2: db "keyboard LED Test...", 0
   316 000008F6 4C454420546573742E-
   316 000008FF 2E2E00             
   317 00000902 28646F6E65290A0D00      .s3: db "(done)", 0x0A, 0x0D, 0
   318 0000090B 5B                      .e0: db "["
   319 0000090C 5A5A5D00                .e1: db "ZZ]", 0
   320                                  
   321 00000910 0000                    .key: dw 0
   322                                  
   323                                  ;***********************************************************
   324                                  ;  ブート処理の第5ステージ
   325                                  ;***********************************************************
   326                                  stage_5:
   327                                          ;------------------------------------------
   328                                          ; 文字列を表示
   329                                          ;------------------------------------------
   330 00000912 68[3E09]E8A8F783C4-             cdecl puts, .s0
   330 0000091A 02                 
   331                                  
   332                                          ;------------------------------------------
   333                                          ; カーネルを読み込む
   334                                          ;------------------------------------------
   335 0000091B 68009C6A106A1068-               cdecl read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END  ; AX = read_lba(.lba, ...);
   335 00000923 [B800]E80CFD83C408 
   336 0000092B 83F810                          cmp ax, KERNEL_SECT                                     ; if (AX != CX)
   337 0000092E 740C                    .10Q:   jz .10E                                                 ; {
   338 00000930 68[4D09]E88AF783C4-     .10T:   cdecl puts, .e0                                         ;       puts(.e0);
   338 00000938 02                 
   339 00000939 E8A3F7                          call reboot                                             ;       reboot(); // 再起動
   340                                  .10E:                                                           ; }
   341                                  
   342                                          ;------------------------------------------
   343                                          ; 処理の終了
   344                                          ;------------------------------------------
   345 0000093C EBFE                            jmp $                                                   ; while(1); // 無限ループ
   346                                  
   347 0000093E 357468207374616765-     .s0 db "5th stage...", 0x0A, 0x0D, 0
   347 00000947 2E2E2E0A0D00       
   348 0000094D 4661696C757265206C-     .e0 db "Failure load kernel...", 0x0A, 0x0D, 0
   348 00000956 6F6164206B65726E65-
   348 0000095F 6C2E2E2E0A0D00     
   349                                  
   350                                  ;***********************************************************
   351                                  ;  パディング（このファイルは8Kバイトとする）
   352                                  ;***********************************************************
   353 00000966 00<rept>                        times BOOT_SIZE - ($ - $$) db 0
