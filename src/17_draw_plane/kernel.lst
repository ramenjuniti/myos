     1                                  ;***********************************************************
     2                                  ; マクロ
     3                                  ;***********************************************************
     4                                  %include "../include/define.s"
     1                              <1> BOOT_SIZE equ (1024 * 8)                    ; ブートコードサイズ
     2                              <1> KERNEL_SIZE equ (1024 * 8)                  ; カーネルサイズ
     3                              <1> 
     4                              <1> BOOT_LOAD equ 0x7C00                        ; ブートプログラムのロード位置
     5                              <1> BOOT_END equ (BOOT_LOAD + BOOT_SIZE)
     6                              <1> 
     7                              <1> SECT_SIZE equ (512)                         ; セクタサイズ
     8                              <1> 
     9                              <1> BOOT_SECT equ (BOOT_SIZE / SECT_SIZE)       ; ブートプログラムのセクタ数
    10                              <1> KERNEL_SECT equ (KERNEL_SIZE / SECT_SIZE)
    11                              <1> 
    12                              <1> E820_RECORD_SIZE equ 20
    13                              <1> 
    14                              <1> KERNEL_LOAD equ 0x0010_1000
    15                              <1> 
     5                                  %include "../include/macro.s"
     1                              <1> %macro cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep %0 - 1
     4                              <1>         push %{-1:-1}
     5                              <1>         %rotate - 1
     6                              <1>     %endrep
     7                              <1>     %rotate - 1
     8                              <1> 
     9                              <1>         call %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>     .no resw 1      ; ドライブ番号
    19 00000002 <res 00000002>      <1>     .cyln resw 1    ; シリンダ
    20 00000004 <res 00000002>      <1>     .head resw 1    ; ヘッド
    21 00000006 <res 00000002>      <1>     .sect resw 1    ; セクタ
    22                              <1> endstruc
     6                                  
     7                                      ORG KERNEL_LOAD                                             ; カーネルのロードアドレス
     8                                  
     9                                  [BITS 32]
    10                                  ;***********************************************************
    11                                  ; エントリポイント
    12                                  ;***********************************************************
    13                                  kernel:
    14                                      ;------------------------------------------
    15                                      ; フォントアドレスを取得
    16                                      ;------------------------------------------
    17 00000000 BE007E0000                  mov esi, BOOT_LOAD + SECT_SIZE                              ; ESI = 0x7C00 + 512
    18 00000005 0FB706                      movzx eax, word [esi + 0]                                   ; EAX = [ESI + 0] // セグメント
    19 00000008 0FB75E02                    movzx ebx, word [esi + 2]                                   ; EBX = [ESI + 2] // オフセット
    20 0000000C C1E004                      shl eax, 4                                                  ; EAX <<= 4;
    21 0000000F 01D8                        add eax, ebx                                                ; EAX += EBX;
    22 00000011 A3[D8000000]                mov [FONT_ADR], eax                                             ; FONT[0] = EAX;
    23                                  
    24                                      ;------------------------------------------
    25                                      ; 8ビットの横線
    26                                      ;------------------------------------------
    27 00000016 B407                        mov ah, 0x07                                                ; AH = 書き込みプレーンを指定(Bit:----|RGB)
    28 00000018 B002                        mov al, 0x02                                                ; AL = マップマスクレジスタ(書き込みプレーンを指定)
    29 0000001A 66BAC403                    mov dx, 0x03C4                                              ; DX = シーケンサ制御ポート
    30 0000001E 66EF                        out dx, ax                                                  ; // ポート出力
    31                                  
    32 00000020 C60500000A00FF              mov [0x000A_0000 + 0], byte 0xFF
    33                                  
    34 00000027 B404                        mov ah, 0x04
    35 00000029 66EF                        out dx, ax
    36                                  
    37 0000002B C60501000A00FF              mov [0x000A_0000 + 1], byte 0xFF
    38                                  
    39 00000032 B402                        mov ah, 0x02
    40 00000034 6689C2                      mov dx, ax
    41                                  
    42 00000037 C60502000A00FF              mov [0x000A_0000 + 2], byte 0xFF
    43                                  
    44 0000003E B401                        mov ah, 0x01
    45 00000040 6689C2                      mov dx, ax
    46                                  
    47 00000043 C60503000A00FF              mov [0x000A_0000 + 3], byte 0xFF
    48                                  
    49                                      ;-------------------------------------------
    50                                      ; 画面を横切る横線
    51                                      ;-------------------------------------------
    52 0000004A B402                        mov ah, 0x02
    53 0000004C 66EF                        out dx, ax
    54                                  
    55 0000004E 8D3D50000A00                lea edi, [0x000A_0000 + 80]                                 ; EDI = VRAMアドレス;
    56 00000054 B950000000                  mov ecx, 80                                                 ; ECX = 繰り返し回数;
    57 00000059 B0FF                        mov al, 0xFF                                                ; AL = ビットパターン
    58 0000005B F3AA                        rep stosb                                                   ; *EDI++ = AL;
    59                                  
    60                                      ;-------------------------------------------
    61                                      ; 8ビットの矩形
    62                                      ;-------------------------------------------
    63 0000005D BF01000000                  mov edi, 1                                                  ; EDI = 行数;
    64                                  
    65 00000062 C1E708                      shl edi, 8                                                  ; EDI *= 256;
    66 00000065 8DBCBF00000A00              lea edi, [edi * 4 + edi + 0xA_0000]                         ; EDI = VRAMアドレス;
    67                                  
    68 0000006C 66C707FF00                  mov [edi + (80 * 0)], word 0xFF
    69 00000071 66C74750FF00                mov [edi + (80 * 1)], word 0xFF
    70 00000077 66C787A0000000FF00          mov [edi + (80 * 2)], word 0xFF
    71 00000080 66C787F0000000FF00          mov [edi + (80 * 3)], word 0xFF
    72 00000089 66C78740010000FF00          mov [edi + (80 * 4)], word 0xFF
    73 00000092 66C78790010000FF00          mov [edi + (80 * 5)], word 0xFF
    74 0000009B 66C787E0010000FF00          mov [edi + (80 * 6)], word 0xFF
    75 000000A4 66C78730020000FF00          mov [edi + (80 * 7)], word 0xFF
    76                                  
    77 000000AD BE41000000                  mov esi, 'A'
    78 000000B2 C1E604                      shl esi, 4
    79 000000B5 0335[D8000000]              add esi, [FONT_ADR]
    80                                  
    81 000000BB BF02000000                  mov edi, 2
    82 000000C0 C1E708                      shl edi, 8
    83 000000C3 8DBCBF00000A00              lea edi, [edi * 4 + edi + 0xA_0000]
    84                                  
    85 000000CA B910000000                  mov ecx, 16                                                 ; ECX = 16; // 1文字の高さ
    86                                  .10L:                                                           ; do
    87                                                                                                  ; {
    88 000000CF A4                          movsb                                                       ;   *EDI++ = *ESI++;
    89 000000D0 83C74F                      add edi, 80 - 1                                             ;   EDI += 79; // 1ドット分
    90 000000D3 E2FA                        loop .10L                                                   ; } while (-ECX);
    91                                  
    92                                      ;--------------------------------------------
    93                                      ; 処理の終了
    94                                      ;--------------------------------------------
    95 000000D5 EBFE                        jmp $
    96                                  
    97 000000D7 00                      ALIGN 4, db 0
    98 000000D8 00000000                FONT_ADR: dd 0
    99                                  
   100                                  ;***********************************************************
   101                                  ; パディング
   102                                  ;***********************************************************
   103 000000DC 00<rept>                    times KERNEL_SIZE - ($ - $$) db 0                           ; パディング
