KBC_Data_Write:
    ;----------------------------
    ; スタックフレームの構築
    ;----------------------------
                                    ;    + 4 | データ
                                    ;    + 2 | IP(戻り値)
    push bp                         ; BP + 0 | BP(元の値)
    mov bp, sp                      ;--------+-----------

    ;----------------------------
    ; レジスタの保存
    ;----------------------------
    push cx


    mov cx, 0                       ; cx = 0; // 最大カウント値
.10L:                               ; do 
                                    ; {
    in al, 0x64                     ;   AL = inp(0x64); // KBCステータス
    test al, 0x02                   ;   ZF = AL & 0x02; // 書き込み可能?
    loopnz .10L                     ; } while (--CX && !ZF);

    cmp cx, 0                       ; if (CX) // 未タイムアウト
    jz .20E                         ; {

    mov al, [bp + 4]                ;   AL = データ;
    out 0x60, al                    ;   outp(0x60, AL);
.20E:                               ; }

    mov ax, cx

    ;----------------------------
    ; レジスタの復帰
    ;----------------------------   
    pop cx

    ;----------------------------
    ; ステックフレームの破棄
    ;----------------------------
    mov sp, bp
    pop bp

    ret

KBC_Data_Read:
    ;----------------------------
    ; スタックフレームの構築
    ;----------------------------
                                    ;    + 4 | データ
                                    ;    + 2 | IP(戻り値)
    push bp                         ; BP + 0 | BP(元の値)
    mov bp, sp                      ;--------+-----------

    ;----------------------------
    ; レジスタの保存
    ;----------------------------
    push cx

    mov cx, 0                       ; cx = 0; // 最大カウント値
.10L:                               ; do
                                    ; {
    in al, 0x64                     ;   AL = inp(0x64); // KBCステータス
    test al, 0x01                   ;   ZF = AL & 0x01; // 読み込み可能?
    loopz .10L                     ; } while (--CX && !ZF);

    cmp cx, 0                       ; if (CX) // 未タイムアウト
    jz .20E                         ; {
                                    ;
    mov ah, 0x00                    ;   AH = 0x00;
    in al, 0x60                     ;   AL = inp(0x60); // データ取得

    mov di, [bp + 4]                ;   DI = ptr;
    mov [di + 0], ax                ;   DI[0] = AX;
.20E:                               ; }

    mov ax, cx                      ; return CX;

    ;----------------------------
    ; レジスタの復帰
    ;----------------------------   
    pop cx

    ;----------------------------
    ; ステックフレームの破棄
    ;----------------------------
    mov sp, bp
    pop bp

    ret

KBC_Cmd_Write:
    ;----------------------------
    ; スタックフレームの構築
    ;----------------------------
                                    ;    + 4 | データ
                                    ;    + 2 | IP(戻り値)
    push bp                         ; BP + 0 | BP(元の値)
    mov bp, sp                      ;--------+-----------

    ;----------------------------
    ; レジスタの保存
    ;----------------------------
    push cx

    mov cx, 0                       ; cx = 0; // 最大カウント値
.10L:                               ; do
                                    ; {
    in al, 0x64                     ;   AL = inp(0x64); // KBCステータス
    test al, 0x02                   ;   ZF = AL & 0x01; // 読み込み可能?
    loopnz .10L                     ; } while (--CX && !ZF);

    cmp cx, 0                       ; if (CX) // 未タイムアウト
    jz .20E                         ; {
                                    ;
    mov al, [bp + 4]                ;   AL = コマンド
    out 0x64, al                    ;   outp(0x64, AL);
.20E:                               ; }

    mov ax, cx

    ;----------------------------
    ; レジスタの復帰
    ;----------------------------   
    pop cx

    ;----------------------------
    ; ステックフレームの破棄
    ;----------------------------
    mov sp, bp
    pop bp

    ret